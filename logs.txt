09:31:32.761 [JavaFX Application Thread] INFO  m.b.j.gui.GeneratorGUI - start 
09:31:32.763 [JavaFX Application Thread] INFO  m.b.j.gui.GeneratorGUI - root set 
09:31:37.653 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseSourceDirectory 
09:31:46.754 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - src :null 
09:31:46.755 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
09:31:52.190 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseDestinationDirectory 
09:31:55.728 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - dest :C:\Users\mbelmokhtar\Desktop\DDD 
09:31:55.729 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
09:31:56.612 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
09:31:56.617 [JavaFX Application Thread] INFO  m.b.j.JavaDocGenerator - static
09:31:56.617 [JavaFX Application Thread] INFO  m.b.j.JavaDocGenerator - propertiesPath null 
09:31:56.620 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : directory D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main
 destination C:\Users\mbelmokhtar\Desktop\DDD
09:31:56.620 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : directory D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main
 destination C:\Users\mbelmokhtar\Desktop\DDD
09:31:57.731 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\adapter\DateTypeAdapter.java
09:31:57.740 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\adapter\package-info.java
09:31:57.836 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\constante\Constantes.java
09:31:57.870 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\constante\Dates.java
09:31:57.930 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\constante\EnumSituation.java
09:31:57.944 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\constante\package-info.java
09:31:57.974 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\constante\TopsRachat.java
09:31:58.006 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\constante\TypeRevenu.java
09:31:58.054 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\ActiviteNonSalarieeDTO.java
09:31:58.076 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\DroitCalculeDTO.java
09:31:58.091 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\DureeGlobaliseeDTO.java
09:31:58.124 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\F02ElementsEntree.java
09:31:58.169 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\F02ElementsSelectionnes.java
09:31:58.191 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\NumberDTO.java
09:31:58.201 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\package-info.java
09:31:58.228 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\PeriodeACCRE.java
09:31:58.259 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\PeriodeAssimileeDTO.java
09:31:58.288 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\PeriodeCotiseeDTO.java
09:31:58.306 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\PeriodeMaladieDTO.java
09:31:58.332 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\PeriodeNsaDTO.java
09:31:58.359 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\PeriodeRachatDTO.java
09:31:58.382 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\PeriodeRachatValorisationDTO.java
09:31:58.414 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\Signalement.java
09:31:58.439 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\TrimestreAssimileDTO.java
09:31:58.493 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\dto\ValorisationPeriodeRegimeDTO.java
09:31:58.519 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\exception\MovalnsaException.java
09:31:58.526 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\exception\package-info.java
09:31:58.539 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\gestionnaire\api\BouchonAccesBareme.java
09:31:58.546 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\gestionnaire\api\package-info.java
09:31:58.562 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\gestionnaire\api\ValorisationNSA.java
09:31:58.620 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\gestionnaire\service\BouchonAccesBaremeImpl.java
09:31:58.629 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\gestionnaire\service\package-info.java
09:31:58.653 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\gestionnaire\service\ValorisationNSAImpl.java
09:31:58.664 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\mapping\package-info.java
09:31:58.694 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\mapping\ValorisationPeriodeRegimeMapping.java
09:31:58.720 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\ComparatorsUtils.java
09:31:58.779 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\DateOutils.java
09:31:58.807 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\EnumUtils.java
09:31:58.836 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\FiltersUtils.java
09:31:58.865 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\ListUtils.java
09:31:58.888 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\LogUtils.java
09:31:58.895 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\Mapper.java
09:31:58.916 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\MappersUtils.java
09:31:59.006 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\MovalnsaUtils.java
09:31:59.060 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\NumberUtils.java
09:31:59.131 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\package-info.java
09:31:59.151 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\outils\Predicate.java
09:31:59.166 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape1\api\OrchestrationEtape1.java
09:31:59.193 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape1\api\package-info.java
09:31:59.221 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape1\api\ReglesEtape1.java
09:31:59.263 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape1\service\OrchestrationEtape1Impl.java
09:31:59.273 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape1\service\package-info.java
09:31:59.333 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape1\service\ReglesEtape1Impl.java
09:31:59.351 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\api\OrchestrationEtape2.java
09:31:59.361 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\api\package-info.java
09:31:59.374 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\api\RegleEtape2SelectionElementCarriere.java
09:31:59.385 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\api\RegleEtape2SelectionPeriode.java
09:31:59.407 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\api\RegleEtape2ValorisationPeriode.java
09:31:59.439 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\service\F02CumulPeriodes.java
09:31:59.470 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\service\OrchestrationEtape2Impl.java
09:31:59.479 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\service\package-info.java
09:31:59.523 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\service\RegleEtape2SelectionElementCarriereImpl.java
09:31:59.650 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\service\RegleEtape2SelectionPeriodeImpl.java
09:31:59.733 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape2\service\RegleEtape2ValorisationPeriodeImpl.java
09:31:59.743 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape3\api\OrchestrationEtape3.java
09:31:59.752 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape3\api\package-info.java
09:31:59.762 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape3\api\RegleEtape3ValorisationAnnee.java
09:31:59.781 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape3\service\OrchestrationEtape3Impl.java
09:31:59.789 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape3\service\package-info.java
09:31:59.843 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape3\service\RegleEtape3ValorisationAnneeImpl.java
09:31:59.861 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape4\api\OrchestrationEtape4.java
09:31:59.870 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape4\api\package-info.java
09:31:59.891 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape4\api\RegleEtape4Majoration.java
09:31:59.945 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape4\service\OrchestrationEtape4Impl.java
09:31:59.967 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape4\service\package-info.java
09:31:59.999 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape4\service\RegleEtape4MajorationImpl.java
09:32:00.021 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape5\api\OrchestrationEtape5.java
09:32:00.032 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape5\api\package-info.java
09:32:00.051 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape5\api\RegleEtape5Totalisation.java
09:32:00.090 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape5\service\OrchestrationEtape5Impl.java
09:32:00.102 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape5\service\package-info.java
09:32:00.161 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape5\service\RegleEtape5TotalisationImpl.java
09:32:00.173 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape7\api\OrchestrationEtape7.java
09:32:00.185 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape7\api\package-info.java
09:32:00.214 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape7\api\RegleEtape7Majoration.java
09:32:00.250 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape7\service\OrchestrationEtape7Impl.java
09:32:00.265 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape7\service\package-info.java
09:32:00.314 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape7\service\RegleEtape7MajorationImpl.java
09:32:00.328 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape8\api\OrchestrationEtape8.java
09:32:00.342 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape8\api\package-info.java
09:32:00.358 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape8\api\RegleEtape8Majoration.java
09:32:00.392 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape8\service\OrchestrationEtape8Impl.java
09:32:00.404 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape8\service\package-info.java
09:32:00.446 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etape8\service\RegleEtape8MajorationImpl.java
09:32:00.461 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etaperestitutionpoint\api\OrchestrationEtapeRestitutiePoint.java
09:32:00.475 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etaperestitutionpoint\api\package-info.java
09:32:00.489 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etaperestitutionpoint\api\RegleEtapeRestituePoint.java
09:32:00.530 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etaperestitutionpoint\service\OrchestrationEtapeRestitutiePointImpl.java
09:32:00.551 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etaperestitutionpoint\service\package-info.java
09:32:00.580 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etaperestitutionpoint\service\RegleEtapeRestituePointImpl.java
09:32:00.590 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapetotalpoint\api\OrchestrationEtapeTotalisePoint.java
09:32:00.600 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapetotalpoint\api\package-info.java
09:32:00.621 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapetotalpoint\api\RegleEtapeTotalisePoint.java
09:32:00.650 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapetotalpoint\service\OrchestrationEtapeTotalisePointImpl.java
09:32:00.663 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapetotalpoint\service\package-info.java
09:32:00.697 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapetotalpoint\service\RegleEtapeTotalisePointImpl.java
09:32:00.719 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\api\OrchestrationEtapeValPointCot.java
09:32:00.730 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\api\package-info.java
09:32:00.754 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\api\RegleEtapeValPointCotSelectionElementCarriere.java
09:32:00.775 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\api\RegleEtapeValPointCotSelectionPeriode.java
09:32:00.794 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\api\RegleEtapeValPointCotValorisationPeriode.java
09:32:00.824 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\service\OrchestrationEtapeValPointCotImpl.java
09:32:00.835 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\service\package-info.java
09:32:00.869 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\service\RegleEtapeValPointCotSelectionElementCarriereImpl.java
09:32:00.911 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\service\RegleEtapeValPointCotSelectionPeriodeImpl.java
09:32:01.015 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointcot\service\RegleEtapeValPointCotValorisationPeriodeImpl.java
09:32:01.032 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\api\OrchestrationEtapeValPointGraReval.java
09:32:01.044 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\api\package-info.java
09:32:01.057 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\api\RegleEtapeSelectionPointGraReval.java
09:32:01.067 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\api\RegleEtapeValPointGraReval.java
09:32:01.094 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\service\OrchestrationEtapeValPointGraRevalmpl.java
09:32:01.101 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\service\package-info.java
09:32:01.118 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\service\RegleEtapeSelectionPointGraRevalImpl.java
09:32:01.156 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\platformsg2_R_64\workspace\movalnsa_2_1_C\movalnsa-metier\src\main\java\fr\msa\agora\movalnsa\regle\etapevalpointreval\service\RegleEtapeValPointGraRevalImpl.java
09:32:01.156 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : done
09:32:01.156 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : done
09:32:01.157 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
00:18:53.571 [main] DEBUG m.b.j.JavaDocGenerator - main
00:20:09.686 [main] DEBUG Utils - main
00:33:32.142 [main] DEBUG Utils - main
01:10:07.172 [main] DEBUG Utils - main
01:22:22.435 [JavaFX Application Thread] INFO  m.b.j.gui.GeneratorGUI - start 
01:22:22.440 [JavaFX Application Thread] INFO  m.b.j.gui.GeneratorGUI - root set 
01:22:41.336 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseDestinationDirectory 
01:22:48.341 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - dest :C:\Users\DELL\Desktop 
01:22:48.341 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
01:22:59.395 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
01:22:59.412 [JavaFX Application Thread] INFO  m.b.j.JavaDocGenerator - static
01:22:59.412 [JavaFX Application Thread] INFO  m.b.j.JavaDocGenerator - propertiesPath null 
01:22:59.430 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : directory D:\Github\JavaDocGenerator\src\main
 destination C:\Users\DELL\Desktop\FF
01:22:59.430 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : directory D:\Github\JavaDocGenerator\src\main
 destination C:\Users\DELL\Desktop\FF
01:23:00.149 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\FormattedJavadocBlockTag.java
01:23:00.274 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\gui\GeneratorGUI.java
01:23:00.415 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\gui\GUIController.java
01:23:00.625 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\JavaDocGenerator.java
01:23:00.669 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\logger\Level.java
01:23:00.752 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\logger\MustaLogger.java
01:23:00.767 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\Utils.java
01:23:00.790 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file D:\Github\JavaDocGenerator\src\main\java\musta\belmo\javadocgenerator\ZipUtils.java
01:23:00.790 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : done
01:23:00.790 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : done
01:23:00.808 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
01:26:23.203 [main] DEBUG Utils - main
01:30:53.660 [main] DEBUG Utils - Method : main
01:32:38.435 [main] DEBUG Utils - Method : main
01:33:05.024 [main] DEBUG Utils - Method : main
01:34:21.594 [main] DEBUG Utils - Method : main
01:35:21.175 [main] DEBUG Utils - Method : main
01:36:01.724 [main] DEBUG Utils - Method : main with objects 3
01:41:09.689 [main] DEBUG Utils - Method : main with objects 34LOL
01:41:22.677 [main] DEBUG Utils - Method : main with objects 3,4,LOL
01:43:28.776 [main] DEBUG Utils - Method : main with values
01:45:55.818 [main] DEBUG Utils - Method : main
18:01:25.040 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - start 
18:01:25.043 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - root set 
18:07:27.515 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
18:07:27.519 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
18:11:47.495 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
18:11:47.498 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
18:16:57.108 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
18:16:57.127 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
18:19:12.690 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - start 
18:19:12.693 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - root set 
18:19:18.168 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - create a file to save 
18:19:21.177 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - src :D:\platformsg2_R_64\workspace\gk1geskrier_1_2_B 
18:19:21.177 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
18:19:24.153 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - chooseDestinationDirectory 
18:19:41.000 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - dest :C:\Users\mustapha\Desktop\TMP\gk1geskrier_1_2.xls 
18:19:41.000 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
18:19:42.443 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - countReturns
18:19:55.823 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - Success
22:22:35.966 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - start 
22:22:35.971 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - root set 
22:24:43.314 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:24:43.319 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:30:10.904 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:30:10.907 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:32:28.449 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:32:28.452 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:32:56.551 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:32:56.555 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:33:15.797 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:33:15.801 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:33:44.616 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:33:44.619 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:34:05.242 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:34:05.244 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:35:40.275 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:35:40.288 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:35:56.247 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:35:56.250 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
22:39:36.245 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
22:39:36.248 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
09:50:10.908 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
09:50:10.920 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
09:59:18.510 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
09:59:18.513 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
10:16:21.096 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
10:16:21.098 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
10:37:54.905 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
10:37:54.909 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
15:14:50.382 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:14:50.403 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:20:31.839 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:20:31.875 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:21:56.831 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:21:56.834 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:22:56.601 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:22:56.606 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:40:20.687 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:40:20.709 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:50:12.557 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:50:12.560 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:51:27.932 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:51:27.936 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:52:34.913 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:52:34.915 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:58:42.881 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:58:42.885 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
15:59:33.159 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - start 
15:59:33.166 [JavaFX Application Thread] INFO  m.b.c.gui.TableCounterGUI - root set 
01:37:43.957 [JavaFX Application Thread] INFO  m.b.c.gui.CatchVerifierTableGui - start 
01:37:43.963 [JavaFX Application Thread] INFO  m.b.c.gui.CatchVerifierTableGui - root set 
01:42:47.678 [JavaFX Application Thread] INFO  m.b.c.gui.CatchVerifierTableGui - start 
01:42:47.682 [JavaFX Application Thread] INFO  m.b.c.gui.CatchVerifierTableGui - root set 
17:50:17.151 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
17:50:17.195 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
17:51:59.603 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - start 
17:51:59.606 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - root set 
17:52:06.578 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - create a file to save 
17:52:13.134 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - src :C:\Users\mustapha\Desktop\DocGen\musta 
17:52:13.135 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
17:52:14.794 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - chooseDestinationDirectory 
17:52:21.684 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - dest :C:\Users\mustapha\Desktop\ReturnCount_.xls 
17:52:21.685 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
17:52:23.060 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - countReturns
17:52:25.889 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - Success
18:25:03.247 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - start 
18:25:03.250 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - root set 
18:25:34.022 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - create a file to save 
18:25:40.353 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - src :C:\Users\mustapha\Desktop\DocGen\musta 
18:25:40.354 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
18:25:41.569 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - chooseDestinationDirectory 
18:25:48.245 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - dest :C:\Users\mustapha\Desktop\mm.xls 
18:25:48.245 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
18:25:49.800 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - countReturns
18:25:51.086 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - Success
18:49:03.742 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - start 
18:49:03.762 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - root set 
18:49:30.292 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - create a file to save 
18:49:37.234 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - src :C:\Users\mustapha\Desktop\DocGen\musta 
18:49:37.234 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
18:49:38.424 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - chooseDestinationDirectory 
18:49:44.568 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - dest :C:\Users\mustapha\Desktop\lol.xls 
18:49:44.569 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
18:49:46.234 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - countReturns
18:49:48.856 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - Success
19:02:36.380 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - start 
19:02:36.390 [JavaFX Application Thread] INFO  m.b.r.gui.ReturnCounterGUI - root set 
19:02:41.029 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - create a file to save 
19:02:47.941 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - src :C:\Users\mustapha\Desktop\DocGen\musta 
19:02:47.941 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
19:02:49.017 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - chooseDestinationDirectory 
19:02:54.574 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - dest :C:\Users\mustapha\Desktop\cmmi.xls 
19:02:54.574 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
19:02:55.842 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - countReturns
19:02:57.718 [JavaFX Application Thread] INFO  m.b.returncounter.gui.GUIController - Success
18:57:13.152 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - start 
18:57:13.183 [JavaFX Application Thread] INFO  m.b.r.gui.TableCounterGUI - root set 
15:41:43.312 [JavaFX Application Thread] INFO  m.b.j.gui.GeneratorGUI - start 
15:41:43.323 [JavaFX Application Thread] INFO  m.b.j.gui.GeneratorGUI - root set 
15:42:00.815 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseDestinationDirectory 
15:42:03.007 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - dest :null 
15:42:03.007 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
15:42:11.393 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
15:42:11.402 [JavaFX Application Thread] INFO  m.b.j.JavaDocGenerator - static
15:42:11.436 [JavaFX Application Thread] DEBUG m.b.j.JavaDocGenerator - Method : loadProperties with values null
15:42:11.440 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter
 destination C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\nn
15:42:11.440 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter,C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\nn
15:42:11.440 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter
 destination C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\nn
15:42:12.436 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:12.438 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:12.438 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:12.438 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:12.439 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.625 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:12.632 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.633 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
15:42:12.634 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.634 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:12.634 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.635 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
15:42:12.635 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.636 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:12.636 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.636 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
15:42:12.636 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.637 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:12.637 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:12.637 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
15:42:12.808 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\main\java\musta\belmo\returncounter\beans\MethodDescriber.java
15:42:13.016 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
15:42:13.016 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
15:42:13.018 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.018 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.019 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.019 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.019 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.020 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.020 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.020 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.021 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.028 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.031 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.032 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.033 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.094 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\main\java\musta\belmo\returncounter\gui\excel\GUIController.java
15:42:13.138 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
15:42:13.139 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
15:42:13.139 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
15:42:13.140 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.140 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.152 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\main\java\musta\belmo\returncounter\gui\excel\ReturnCounterGUI.java
15:42:13.165 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values DEFAULT_CONSTR_COMMENT
15:42:13.166 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
15:42:13.166 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
15:42:13.340 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\main\java\musta\belmo\returncounter\gui\table\MustaTableColumn.java
15:42:13.419 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.419 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.419 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.420 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.420 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.420 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:42:13.421 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.422 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.423 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.477 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\main\java\musta\belmo\returncounter\gui\table\TableController.java
15:42:13.507 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
15:42:13.507 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
15:42:13.514 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.514 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:42:13.515 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.567 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\main\java\musta\belmo\returncounter\gui\table\TableCounterGUI.java
15:42:13.661 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.663 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.663 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.664 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.664 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.666 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.667 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:13.667 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.668 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.668 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.669 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.671 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.671 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:13.731 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\main\java\musta\belmo\returncounter\service\ReturnCounter.java
15:42:13.814 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:13.815 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.815 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:42:13.815 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.816 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.816 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:13.816 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.817 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.817 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:13.818 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.818 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.819 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.819 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.821 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.822 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.822 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.823 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.823 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.824 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.824 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.825 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.825 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.826 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:13.826 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:13.827 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:14.088 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\test\java\musta\belmo\returncounter\ReturnCounterTest.java
15:42:14.210 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:42:14.210 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.210 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:42:14.211 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:14.211 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.211 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:42:14.212 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:14.212 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.213 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:42:14.255 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\test\java\musta\belmo\returncounter\ReturnCounterTestWriteToExcel.java
15:42:14.312 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.312 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.313 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.313 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.314 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.314 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.315 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.315 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.315 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.371 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\src\test\resources\CompilationUnit.java
15:42:14.377 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.378 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.379 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.379 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.380 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.380 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.381 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.382 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.383 [Thread-4] DEBUG m.b.j.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:42:14.399 [Thread-4] INFO  m.b.j.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\javaProjects\JavaDocGenerator\javamethodreturncounter\target\test-classes\CompilationUnit.java
15:42:14.399 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : done
15:42:14.399 [Thread-4] INFO  m.b.j.JavaDocGenerator - generateJavaDocForAllClasses : done
15:42:14.406 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
17:00:14.160 [JavaFX Application Thread] INFO  m.b.j.app.AbstractJavaFXApplication - start 
17:00:15.502 [JavaFX Application Thread] INFO  m.b.j.app.AbstractJavaFXApplication - root set 
18:17:33.574 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
18:17:35.014 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
18:17:35.019 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
18:17:35.020 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
18:17:44.662 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseSourceDirectory 
18:18:05.815 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - src :C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller 
18:18:05.816 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
18:18:08.907 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseDestinationDirectory 
18:18:15.703 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - dest :C:\Users\mustapha\Desktop\TMP 
18:18:15.703 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
18:18:17.784 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
18:18:17.789 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller,C:\Users\mustapha\Desktop\TMP
18:18:17.789 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller
 destination C:\Users\mustapha\Desktop\TMP
18:18:18.669 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:18:18.677 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:18:18.678 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:18:18.681 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:18:18.692 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
18:18:18.694 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
18:18:18.695 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:18:18.786 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:18:18.786 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : done
18:18:18.786 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
18:22:35.778 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
18:22:36.158 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
18:22:36.190 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
18:22:36.194 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
18:22:38.767 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseSourceDirectory 
18:22:47.552 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - src :C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller 
18:22:47.552 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
18:22:48.778 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseDestinationDirectory 
18:23:17.869 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - dest :C:\Users\mustapha\Desktop\TMP\NN 
18:23:17.870 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
18:23:20.689 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
18:23:20.709 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller,C:\Users\mustapha\Desktop\TMP\NN
18:23:20.710 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller
 destination C:\Users\mustapha\Desktop\TMP\NN
18:23:21.130 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:23:21.133 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
18:23:21.133 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
18:23:21.137 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:23:21.138 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:23:21.140 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:23:21.142 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
18:23:21.142 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
18:23:21.142 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:23:21.194 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:23:21.195 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : done
18:23:21.195 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
18:25:51.743 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - loadProperties
18:25:59.018 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:25:59.045 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - file C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:26:03.537 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
18:26:03.540 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller,C:\Users\mustapha\Desktop\TMP\NN
18:26:03.540 [Thread-5] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller
 destination C:\Users\mustapha\Desktop\TMP\NN
18:26:03.568 [Thread-5] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:26:03.569 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
18:26:03.569 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
18:26:03.570 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:26:03.570 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:26:03.571 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:26:03.571 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
18:26:03.571 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
18:26:03.571 [Thread-5] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:26:03.581 [Thread-5] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:26:03.581 [Thread-5] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : done
18:26:03.585 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
18:26:24.538 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
18:26:24.539 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller,C:\Users\mustapha\Desktop\TMP\NN
18:26:24.539 [Thread-6] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller
 destination C:\Users\mustapha\Desktop\TMP\NN
18:26:24.563 [Thread-6] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:26:24.564 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
18:26:24.564 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
18:26:24.565 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:26:24.565 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:26:24.566 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:26:24.567 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
18:26:24.567 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
18:26:24.567 [Thread-6] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:26:24.580 [Thread-6] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:26:24.580 [Thread-6] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : done
18:26:24.587 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
18:27:05.545 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
18:27:05.546 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller,C:\Users\mustapha\Desktop\TMP\NN
18:27:05.546 [Thread-7] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller
 destination C:\Users\mustapha\Desktop\TMP\NN
18:27:05.564 [Thread-7] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:27:05.572 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
18:27:05.573 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
18:27:05.574 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:27:05.574 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:27:05.575 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:27:05.575 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
18:27:05.575 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
18:27:05.575 [Thread-7] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:27:05.594 [Thread-7] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:27:05.594 [Thread-7] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : done
18:27:05.605 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
18:28:13.170 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - loadProperties
18:28:21.269 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:28:21.271 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - file C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:28:58.254 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
18:28:58.255 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller,C:\Users\mustapha\Desktop\TMP\NN
18:28:58.255 [Thread-8] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller
 destination C:\Users\mustapha\Desktop\TMP\NN
18:28:58.274 [Thread-8] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:28:58.274 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
18:28:58.276 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
18:28:58.277 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:28:58.277 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:28:58.278 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:28:58.278 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
18:28:58.278 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
18:28:58.278 [Thread-8] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:28:58.314 [Thread-8] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:28:58.315 [Thread-8] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : done
18:28:58.315 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
18:29:44.631 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
18:29:45.218 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
18:29:52.340 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
18:29:52.346 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
18:29:58.738 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - loadProperties
18:30:24.278 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:31:00.291 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - file C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:33:10.690 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
18:33:11.110 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
18:33:11.118 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
18:33:31.986 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
18:33:38.155 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - loadProperties
18:33:43.467 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:34:13.475 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - file C:\Users\mustapha\Desktop\javaCodeGenerator_V0.2\application.properties
18:34:17.622 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseSourceDirectory 
18:34:29.215 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - src :C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller 
18:34:29.216 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - sourceText :TextField[id=sourceText, styleClass=text-input text-field] 
18:34:31.035 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - chooseDestinationDirectory 
18:34:37.518 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - dest :C:\Users\mustapha\Desktop\TMP\NN 
18:34:37.518 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - destText :TextField[id=destText, styleClass=text-input text-field] 
18:34:39.985 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - generateDoc
18:34:40.058 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : generateJavaDocForAllClasses with values C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller,C:\Users\mustapha\Desktop\TMP\NN
18:34:40.058 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : directory C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller
 destination C:\Users\mustapha\Desktop\TMP\NN
18:34:40.660 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:34:40.664 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
18:34:40.664 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
18:34:40.671 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:34:40.672 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
18:34:40.673 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:34:40.676 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
18:34:40.676 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
18:34:40.677 [Thread-4] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
18:34:40.715 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  file C:\Users\mustapha\Desktop\DocGen\musta\belmo\utils\fx\controller\FxController.java
18:34:40.715 [Thread-4] INFO  m.b.j.service.JavaDocGenerator - generateJavaDocForAllClasses : done
18:34:40.749 [JavaFX Application Thread] INFO  m.b.j.gui.GUIController - Success
19:16:59.506 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:17:00.567 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:19:55.431 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:19:55.875 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:24:34.780 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:24:35.278 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:26:20.072 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:26:20.343 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:27:28.405 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:27:28.664 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:29:54.921 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:29:55.338 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:39:11.965 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:39:12.364 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:43:39.023 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:43:39.721 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:46:15.596 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:46:15.943 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:50:37.613 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:50:38.161 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:56:49.297 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:56:50.036 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:57:32.428 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:57:32.740 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
19:58:24.756 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
19:58:25.083 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
20:00:50.577 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
20:00:51.278 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
20:02:04.668 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
20:02:05.108 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
21:46:16.522 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
21:46:17.302 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
21:48:41.103 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
21:48:41.542 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
21:49:59.126 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
21:49:59.609 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
21:51:52.128 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
21:51:52.448 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
22:01:09.673 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
22:01:10.113 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
22:10:42.042 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
22:10:42.389 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
22:39:28.503 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
22:39:28.943 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:04:35.459 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:04:36.014 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:08:58.476 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:08:59.048 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:14:54.845 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:14:55.388 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:15:55.138 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:15:55.572 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:34:10.680 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:34:10.985 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:34:54.039 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:34:54.474 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:37:20.104 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:37:20.449 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:40:23.038 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:40:23.357 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:43:33.842 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:43:34.555 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:45:03.488 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:45:04.087 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:45:59.622 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:46:00.291 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:50:12.763 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:50:13.351 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:50:56.790 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:50:57.323 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:51:26.472 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:51:27.112 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:58:52.474 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:58:52.906 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
00:08:52.227 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
00:08:52.602 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
00:09:05.173 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
00:09:05.219 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
00:09:05.602 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

/**
 * Created by DELL on 04/08/2018.
 *
 * @since lot 1.2
 */
public class FxController {

    /**
     * L'attribut {@link #inputText}.
     */
    @FXML
    TextArea inputText;

    /**
     * L'attribut {@link #buttons}.
     */
    @FXML
    HBox buttons;

    /**
     * TODO: Compléter la description de cette méthode
     *
     * @throws IOException Exception levée si erreur.
     */
    @FXML
    public void initialize() throws IOException {
        try{
             ActionButton button = new ActionButton();
        }catch(Exception e){
System.out.println("HELLO");

        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    /**
     * Edit text
     *
     * @param actionEvent {@link ActionEvent}
     */
    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

00:09:05.615 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
00:09:05.615 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
00:09:05.618 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:09:05.620 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:09:05.621 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:09:05.621 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
00:09:05.622 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:09:05.622 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:09:05.634 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
00:10:21.540 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
00:10:21.540 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
14:24:38.596 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
14:24:39.960 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
14:30:52.173 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
14:30:52.207 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
14:30:52.687 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

public class FxController {

    /**
     * L'attribut {@link #inputText}.
     */
    @FXML
    TextArea inputText;

    /**
     * L'attribut {@link #buttons}.
     */
    @FXML
    HBox buttons;

    /**
     * TODO: Compléter la description de cette méthode
     *
     * @throws IOException Exception levée si erreur.
     */
    @FXML
    public void initialize() throws IOException {
        try{
             ActionButton button = new ActionButton();
        }catch(Exception e){
System.out.println("HELLO");

        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    /**
     * Edit text
     *
     * @param actionEvent {@link ActionEvent}
     */
    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

14:30:52.695 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
14:30:52.696 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
14:30:52.698 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
14:30:52.699 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
14:30:52.700 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
14:30:52.700 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
14:30:52.700 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
14:30:52.701 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
14:30:52.740 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
14:30:52.781 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
14:30:52.782 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
14:31:11.265 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
14:31:11.265 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
14:31:11.266 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code 
14:31:11.266 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
14:31:34.418 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
14:31:34.418 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
14:31:34.419 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code 
14:31:34.419 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
14:31:49.737 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
14:31:49.737 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
14:31:49.740 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.gui;

import javafx.scene.control.Button;
import musta.belmo.utils.textutils.commons.Actions;

/**
 * Created by DELL on 06/08/2018.
 *
 * @since lot 1.2
 */
public class ActionButton extends Button {

    /**
     * L'attribut {@link #actions}.
     */
    private Actions actions;

    /**
     * @param actions Valeur à affecter à l'attribut {@link #actions}
     */
    public void setActions(Actions actions) {
        this.actions = actions;
    }

    /**
     * @return Attribut {@link #actions}
     */
    public Actions getActions() {
        return actions;
    }
}

14:31:49.740 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
14:31:49.740 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
14:31:49.741 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
14:31:49.741 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
14:31:49.741 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
14:31:49.741 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
14:31:49.742 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
14:31:49.743 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
14:58:34.624 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
14:58:34.937 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
14:59:44.788 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
14:59:45.203 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
15:00:10.713 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:00:10.715 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:00:10.956 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.gui;

import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
import musta.belmo.utils.textutils.commons.Actions;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by DELL on 06/08/2018.
 *
 * @since lot 1.2
 */
public class ActionButtonGroup extends HBox {

    /**
     * @return Attribut {@link #buttons}
     */
    public List<ActionButton> getButtons() {
        ObservableList<Node> children = super.getChildren();
        List<ActionButton> list = new ArrayList<>();
        for (Node child : children) {
            if (child.getClass() == ActionButton.class)
                list.add((ActionButton) child);
        }
        return list;
    }
}

15:00:10.958 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
15:00:10.958 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
15:00:10.961 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:00:10.961 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
15:00:10.967 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:01:20.075 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:01:20.076 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:01:20.077 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code 
15:01:20.077 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:01:21.099 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:01:21.099 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:01:21.113 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code 
15:01:21.113 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:01:21.317 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:01:21.318 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:01:21.319 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code 
15:01:21.319 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:01:21.525 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:01:21.526 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:01:21.527 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code 
15:01:21.527 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:05:09.993 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
15:05:10.323 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
15:06:09.913 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
15:06:10.277 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
15:07:27.611 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:07:27.614 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:07:27.864 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

public class FxController {

    /**
     * L'attribut {@link #inputText}.
     */
    @FXML
    TextArea inputText;

    /**
     * L'attribut {@link #buttons}.
     */
    @FXML
    HBox buttons;

    /**
     * TODO: Compléter la description de cette méthode
     *
     * @throws IOException Exception levée si erreur.
     */
    @FXML
    public void initialize() throws IOException {
        try{
             ActionButton button = new ActionButton();
        }catch(Exception e){
System.out.println("HELLO");

        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    /**
     * Edit text
     *
     * @param actionEvent {@link ActionEvent}
     */
    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

15:07:27.868 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
15:07:27.869 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
15:07:27.873 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:27.874 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:27.875 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:27.876 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:07:27.877 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:07:27.878 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:27.885 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:07:44.414 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:07:44.414 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:07:44.446 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

/**
 * TODO : Compléter la description de cette classe
 *
 * @author toBeSpecified
 * @since 1.0.0.SNAPSHOT
 */
public class FxController {

    /**
     * L'attribut {@link #inputText}.
     */
    @FXML
    TextArea inputText;

   
    @FXML
    HBox buttons;

    /**
     * TODO: Compléter la description de cette méthode
     *
     * @throws IOException Exception levée si erreur.
     */
    @FXML
    public void initialize() throws IOException {
        try {
            ActionButton button = new ActionButton();
        } catch (Exception e) {
            System.out.println("HELLO");
        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    /**
     * Edit text
     *
     * @param actionEvent {@link ActionEvent}
     */
    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

15:07:44.452 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
15:07:44.453 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
15:07:44.454 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:44.454 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:44.455 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:44.456 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:07:44.456 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:07:44.456 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:44.457 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:07:47.458 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:07:47.458 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:07:47.492 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

/**
 * TODO : Compléter la description de cette classe
 *
 * @author toBeSpecified
 * @since 1.0.0.SNAPSHOT
 */
public class FxController {

    /**
     * L'attribut {@link #inputText}.
     */
    @FXML
    TextArea inputText;

    /**
     * L'attribut {@link #buttons}.
     */
    @FXML
    HBox buttons;

    /**
     * TODO: Compléter la description de cette méthode
     *
     * @throws IOException Exception levée si erreur.
     */
    @FXML
    public void initialize() throws IOException {
        try {
            ActionButton button = new ActionButton();
        } catch (Exception e) {
            System.out.println("HELLO");
        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    /**
     * Edit text
     *
     * @param actionEvent {@link ActionEvent}
     */
    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

15:07:47.493 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
15:07:47.494 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
15:07:47.494 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:47.495 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:47.495 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:47.495 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:07:47.496 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:07:47.496 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:47.496 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:07:57.797 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
15:07:57.798 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
15:07:57.832 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

/**
 * TODO : Compléter la description de cette classe
 *
 * @author toBeSpecified
 * @since 1.0.0.SNAPSHOT
 */
public class FxController {

    /**
     * L'attribut {@link #inputText}.
     */
    @FXML
    TextArea inputText;

    /**
     * L'attribut {@link #buttons}.
     */
    @FXML
    HBox buttons;

    /**
     * TODO: Compléter la description de cette méthode
     *
     * @throws IOException Exception levée si erreur.
     */
    @FXML
    public void initialize() throws IOException {
        try {
            ActionButton button = new ActionButton();
        } catch (Exception e) {
            System.out.println("HELLO");
        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    /**
     * Edit text
     *
     * @param actionEvent {@link ActionEvent}
     */
    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

15:07:57.835 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
15:07:57.836 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
15:07:57.836 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:57.837 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
15:07:57.837 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:57.838 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
15:07:57.838 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
15:07:57.839 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
15:07:57.839 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
15:15:53.974 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
15:15:54.265 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
15:18:31.156 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
15:18:31.512 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:40:25.235 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:40:54.480 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
23:40:54.941 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
23:42:10.845 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
23:42:10.881 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
23:42:11.499 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

/**
 * Created by DELL on 04/08/2018.
 *
 * @since lot 1.2
 */
public class FxController {

    /**
     * L'attribut {@link #inputText}.
     */
    @FXML
    TextArea inputText;

    /**
     * L'attribut {@link #buttons}.
     */
    @FXML
    HBox buttons;

    /**
     * TODO: Compléter la description de cette méthode
     *
     * @throws IOException Exception levée si erreur.
     */
    @FXML
    public void initialize() throws IOException {
        try{
             ActionButton button = new ActionButton();
        }catch(Exception e){
System.out.println("HELLO");

        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    /**
     * Edit text
     *
     * @param actionEvent {@link ActionEvent}
     */
    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

23:42:11.507 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
23:42:11.508 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
23:42:11.511 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
23:42:11.512 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
23:42:11.513 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
23:42:11.514 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
23:42:11.514 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
23:42:11.515 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
23:42:11.552 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
23:42:41.792 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
23:42:41.792 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
23:42:41.794 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code public class AA{
private String aa;
}
23:42:41.795 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
23:42:41.795 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
23:42:41.795 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
23:42:41.796 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
23:43:02.825 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
23:43:02.826 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
23:45:10.718 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
23:45:10.718 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
23:45:10.722 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code 
public enum AA {

     aa;
}

23:45:10.722 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
23:45:11.800 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
23:45:11.801 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
23:45:11.802 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code public enum AA {

    aa
}

23:45:11.802 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
23:45:24.404 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
23:45:24.404 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
23:45:24.405 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code public enum AA {

    aa
}
 
23:45:24.406 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
23:47:10.656 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
23:47:10.657 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
23:47:10.658 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code public enum AA {

    aa;
}

23:47:10.658 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
00:05:00.356 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
00:05:00.981 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
00:05:28.427 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
00:05:28.429 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
00:05:28.639 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.textutils.commons;

public enum Actions {

    DELETE("Delete"),
    DELETE_EMPTY_LINES("Delete empty lines"),
    CAPITALIZE("Capitalize"),
    TO_LOWERCASE("To lowercase"),
    TO_UPPER_CASE("To uppercase"),
    TEST_REGEX("Highlight"),
    CAPITALIZE_EACH_WORDS("Capitalize each word"),
    CAMELCASE("CamelCase"),
    UNCAMELCASE("Decompose CamelCase"),
    REDUCE_WHITE_SPACE("Reduce white spaces"),
    ENCODE_64("Encode 64"),
    DECODE_64("Decode 64"),
    INDENT("Indent"),
    REPLACE_ACCENTED("Replace accented letters"),
    DELETE_SYMBOLS("Delete symbols"),
    RANDOM_STRING("Random String"),
    DELETE_LINES("Delete lines"),
    UNDO("undo"),
    REDO("redo"),
    ADD_LINE("Add line at");

    /**
     * L'attribut {@link #label}.
     */
    private String label;

    /**
     * Constructeur de la classe Actions
     *
     * @param label{@link String}
     */
    Actions(String label) {
        this.label = label;
    }

    /**
     * @return Attribut {@link #label}
     */
    public String getLabel() {
        return label;
    }
}

00:05:28.640 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
00:05:28.644 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:05:28.646 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:05:28.646 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
00:05:28.652 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
00:06:07.708 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
00:06:07.709 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
00:06:07.718 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.textutils.commons;

public enum Actions {

    DELETE("Delete"),
    DELETE_EMPTY_LINES("Delete empty lines"),
    CAPITALIZE("Capitalize"),
    TO_LOWERCASE("To lowercase"),
    TO_UPPER_CASE("To uppercase"),
    TEST_REGEX("Highlight"),
    CAPITALIZE_EACH_WORDS("Capitalize each word"),
    CAMELCASE("CamelCase"),
    UNCAMELCASE("Decompose CamelCase"),
    REDUCE_WHITE_SPACE("Reduce white spaces"),
    ENCODE_64("Encode 64"),
    DECODE_64("Decode 64"),
    INDENT("Indent"),
    REPLACE_ACCENTED("Replace accented letters"),
    DELETE_SYMBOLS("Delete symbols"),
    RANDOM_STRING("Random String"),
    DELETE_LINES("Delete lines"),
    UNDO("undo"),
    REDO("redo"),
    ADD_LINE("Add line at");

    /**
     * L'attribut {@link #label}.
     */
    private String label;

    /**
     * Constructeur de la classe Actions
     *
     * @param label{@link String}
     */
    Actions(String label) {
        this.label = label;
    }

    /**
     * @return Attribut {@link #label}
     */
    public String getLabel() {
        return label;
    }
}

00:06:07.719 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
00:06:07.719 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:06:07.719 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:06:07.720 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
00:06:07.720 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
00:06:09.249 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
00:06:09.250 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
00:06:09.256 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.textutils.commons;

public enum Actions {

    DELETE("Delete"),
    DELETE_EMPTY_LINES("Delete empty lines"),
    CAPITALIZE("Capitalize"),
    TO_LOWERCASE("To lowercase"),
    TO_UPPER_CASE("To uppercase"),
    TEST_REGEX("Highlight"),
    CAPITALIZE_EACH_WORDS("Capitalize each word"),
    CAMELCASE("CamelCase"),
    UNCAMELCASE("Decompose CamelCase"),
    REDUCE_WHITE_SPACE("Reduce white spaces"),
    ENCODE_64("Encode 64"),
    DECODE_64("Decode 64"),
    INDENT("Indent"),
    REPLACE_ACCENTED("Replace accented letters"),
    DELETE_SYMBOLS("Delete symbols"),
    RANDOM_STRING("Random String"),
    DELETE_LINES("Delete lines"),
    UNDO("undo"),
    REDO("redo"),
    ADD_LINE("Add line at");

    /**
     * L'attribut {@link #label}.
     */
    private String label;

    /**
     * Constructeur de la classe Actions
     *
     * @param label{@link String}
     */
    Actions(String label) {
        this.label = label;
    }

    /**
     * @return Attribut {@link #label}
     */
    public String getLabel() {
        return label;
    }
}

00:06:09.257 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
00:06:09.258 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:06:09.258 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:06:09.258 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
00:06:09.258 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
00:13:54.014 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
00:13:54.297 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
00:14:07.990 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - static
00:14:07.993 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
00:14:08.275 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.javacodegenerator.service;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.comments.LineComment;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.javadoc.Javadoc;
import com.github.javaparser.javadoc.JavadocBlockTag;
import com.github.javaparser.javadoc.description.JavadocDescription;
import com.github.javaparser.javadoc.description.JavadocSnippet;
import musta.belmo.javacodecore.logger.Level;
import musta.belmo.javacodecore.logger.MustaLogger;
import musta.belmo.javacodegenerator.FormattedJavadocBlockTag;
import musta.belmo.javacodecore.Utils;
import musta.belmo.javacodecore.ZipUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Optional;
import java.util.Properties;

public class JavaDocGenerator {

    private static final String ATTRIBUT_COMMENT_FORMAT = "ATTRIBUT_COMMENT_FORMAT";

    private static final String UTF_8 = "UTF-8";

    private static final String TODO_METHOD_TEXT = "TODO_METHOD_TEXT";

    private static final String INHERIT_DOC = "INHERIT_DOC";

    private static final String SETTER_COMMENT = "SETTER_COMMENT";

    private static final String FIELD_COMMENT = "FIELD_COMMENT";

    private static final String CONSTANT_COMMENT = "CONSTANT_COMMENT";

    private static final String LINK_COMMENT = "LINK_COMMENT";

    private static final String STRING = "String";

    private static final String FIELD_VALUE_COMMENT = "FIELD_VALUE_COMMENT";

    private static final String SINGLE_STRING_FORMAT = "%s";

    private static final String CONSTR_COMMENT = "CONSTR_COMMENT";

    private static final String DEFAULT_CONSTR_COMMENT = "DEFAULT_CONSTR_COMMENT";

    private static final String EXCEPTION_COMMENT = "EXCEPTION_COMMENT";

    private static final String JAVA_EXTENSION = "java";

    private static final String ZIP_EXTENSION = ".zip";

    private static final String SINCE_VERSION = "SINCE_VERSION";

    private static final String AUTHOR = "AUTHOR";

    private static final String APPLICATION_PROPERTIES = "application.properties";

    private String propertiesPath;

    private Properties properties;

    final MustaLogger logger;

    public JavaDocGenerator() {
        logger = new MustaLogger(getClass());
        logger.info("static");
        loadProperties(null);
    }

    public String readFromProperties(String key) {
        logger.logCurrentMethod(Level.DEBUG, key);
        return properties.getProperty(key);
    }

    public void loadProperties(String propertiesPath) {
        logger.logCurrentMethod(Level.DEBUG, propertiesPath);
        URL resource = null;
        if (propertiesPath == null) {
            resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
        } else {
            File file = new File(propertiesPath);
            try {
                resource = file.toURI().toURL();
            } catch (MalformedURLException e) {
                logger.error(propertiesPath, e);
            }
            if (resource == null) {
                resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
            }
        }
        if (resource != null) {
            properties = new Properties();
            try {
                InputStream resourceAsStream = resource.openStream();
                properties.load(resourceAsStream);
            } catch (IOException e) {
                logger.error("readFromProperties", e);
            }
        }
        this.propertiesPath = propertiesPath;
    }

    public void generateJavaDocForAllClasses(File directory, File dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.logCurrentMethod(Level.DEBUG, directory, dest);
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File destinationZip = new File(dest.getAbsolutePath());
        boolean isDirectory = directory.isDirectory();
        if (isDirectory) {
            Collection<File> files = FileUtils.listFiles(directory, new String[] { JAVA_EXTENSION }, true);
            for (File file : files) {
                generateJavaDoc(file.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
            }
        } else {
            generateJavaDoc(directory.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
        }
        if (toZip) {
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(".zip")));
            logger.info("file add to zip file {}", destinationZip.getAbsolutePath());
        }
        logger.info("generateJavaDocForAllClasses : done");
    }

    public void generateJavaDocForAllClasses(String directory, String dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File dir = new File(directory);
        File destinationZip = new File(dest);
        generateJavaDocForAllClasses(dir, destinationZip, toZip, deleteOldJavadoc);
        logger.info("generateJavaDocForAllClasses : done");
    }

    /**
     * Delete java doc for all classes
     *
     * @param directory {@link String}
     * @param dest      {@link String}
     * @param toZip     boolean
     * @throws Exception Exception levée si erreur.
     */
    private void deleteJavaDocForAllClasses(String directory, String dest, boolean toZip) throws Exception {
        // NOSONAR
        File dir = new File(directory);
        if (dir.isDirectory()) {
            Collection<File> files = FileUtils.listFiles(dir, new String[] { JAVA_EXTENSION }, toZip);
            for (File file : files) {
                deleteJavaDoc(file.getAbsolutePath(), dest);
            }
        } else {
            deleteJavaDoc(dir.getAbsolutePath(), dest);
        }
        if (toZip) {
            File destinationZip = new File(dest);
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(ZIP_EXTENSION)));
        }
    }

    /**
     * Generate java doc
     *
     * @param srcPath          {@link String}
     * @param destinationFile  {@link String}
     * @param deleteOldJavaDoc boolean
     */
    public void generateJavaDoc(String srcPath, String destinationFile, boolean deleteOldJavaDoc) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        String javaDocAsString = generateJavaDocAsString(compilationUnit.toString(), deleteOldJavaDoc);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        FileUtils.write(destFile, javaDocAsString, UTF_8);
        logger.info("generated javadoc for  file {}", srcPath);
    }

    private void generateEnumJavaDoc(EnumDeclaration enumDeclaration) {
        logger.logCurrentMethod(Level.DEBUG, enumDeclaration);
    }

    public String generateJavaDocAsString(String src, boolean deleteOldJavaDoc) throws IOException {
        CompilationUnit compilationUnit = JavaParser.parse(src);
        return generateJavaDocAsString(compilationUnit, deleteOldJavaDoc);
    }

    public String generateJavaDocAsString(CompilationUnit compilationUnit, boolean deleteOldJavaDoc) throws IOException {
        if (deleteOldJavaDoc) {
            deleteOldJavaDoc(compilationUnit);
            logger.info("deleted javadoc for  source code {}", compilationUnit.toString());
        }
        compilationUnit.findAll(EnumDeclaration.class).forEach(this::generateEnumJavaDoc);
        compilationUnit.findAll(ClassOrInterfaceDeclaration.class).forEach(this::generateClassJavaDoc);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(this::generateConstructorJavaDoc);
        compilationUnit.findAll(FieldDeclaration.class).forEach(this::generateFieldJavaDoc);
        compilationUnit.findAll(MethodDeclaration.class).forEach(this::generateMethodJavaDoc);
        logger.info("generated javadoc for  source code");
        return compilationUnit.toString();
    }

    public void deleteSettersForLists(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        compilationUnit.findAll(MethodDeclaration.class).stream().filter(methodDeclaration -> {
            boolean paramListExists = false;
            if (methodDeclaration.getName().asString().startsWith("set")) {
                for (Parameter parameter : methodDeclaration.getParameters()) {
                    if (parameter.getType().asString().contains("List<")) {
                        paramListExists = true;
                        break;
                    }
                }
            }
            return paramListExists;
        }).forEach(MethodDeclaration::remove);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
    }

    public void removeVolatileModifier(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        compilationUnit.findAll(FieldDeclaration.class).forEach(fieldDeclaration -> {
            EnumSet<Modifier> modifiers = fieldDeclaration.getModifiers();
            modifiers.remove(Modifier.VOLATILE);
        });
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        System.out.println(compilationUnit);
    }

    public void addNOSONAR(String srcPath, String destinationFile, String justification) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        compilationUnit.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {
            if (methodDeclaration.getName().asString().startsWith("get") && methodDeclaration.getType().asString().contains("List<")) {
                BlockStmt blockStmt = methodDeclaration.getBody().get();
                for (Statement statement : blockStmt.getStatements()) {
                    if (statement.isReturnStmt()) {
                        statement.setLineComment(String.format("NOSONAR :%s", justification));
                    }
                }
            }
        });
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        System.out.println(compilationUnit);
    }

    private File getDestination(String destinationFile, File srcFile, CompilationUnit compilationUnit) {
        return compilationUnit.getPackageDeclaration().map(packageDeclaration -> new File(destinationFile, Utils.convertPackageDeclarationToPath(packageDeclaration.getName().asString()) + File.separator + srcFile.getName())).orElseGet(() -> new File(destinationFile));
    }

    private boolean isCamelCase(String s) {
        return s != null && s.matches("[a-z]+[A-Z\\d]+\\w+");
    }

    public void deleteJavaDoc(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        compilationUnit.findAll(EnumDeclaration.class).forEach(EnumDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ClassOrInterfaceDeclaration.class).forEach(ClassOrInterfaceDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(ConstructorDeclaration::removeJavaDocComment);
        compilationUnit.findAll(FieldDeclaration.class).forEach(FieldDeclaration::removeJavaDocComment);
        compilationUnit.findAll(MethodDeclaration.class).forEach(MethodDeclaration::removeJavaDocComment);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        System.out.println(compilationUnit);
        logger.info("deleted javadoc for  file {}", srcPath);
    }

    public void deleteOldJavaDoc(CompilationUnit compilationUnit) throws IOException {
        compilationUnit.findAll(ClassOrInterfaceDeclaration.class).forEach(ClassOrInterfaceDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(ConstructorDeclaration::removeJavaDocComment);
        compilationUnit.findAll(FieldDeclaration.class).forEach(FieldDeclaration::removeJavaDocComment);
        compilationUnit.findAll(MethodDeclaration.class).forEach(MethodDeclaration::removeJavaDocComment);
    }

    private void generateClassJavaDoc(ClassOrInterfaceDeclaration classDef) {
        if (!classDef.hasJavaDocComment()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String text = "TODO : Compléter la description de cette classe ";
            JavadocSnippet element = new JavadocSnippet(text);
            javadocDescription.addElement(element);
            String author = readFromProperties(AUTHOR);
            String since = readFromProperties(SINCE_VERSION);
            if (author != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, author));
            if (since != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, since));
            classDef.setJavadocComment(javadoc);
        } else {
            classDef.getJavadoc().ifPresent(javadoc -> {
                javadoc.getBlockTags().removeIf(blockTag -> JavadocBlockTag.Type.SINCE.equals(blockTag.getType()));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, readFromProperties(SINCE_VERSION)));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, readFromProperties(AUTHOR)));
                classDef.setJavadocComment(javadoc);
            });
        }
    }

    private void generateConstructorJavaDoc(ConstructorDeclaration constructorDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        NodeList<Parameter> constructParams = constructorDeclaration.getParameters();
        String leadingComment;
        if (constructParams.isEmpty() && constructorDeclaration.getBody().getOrphanComments().isEmpty()) {
            leadingComment = readFromProperties(DEFAULT_CONSTR_COMMENT);
            constructorDeclaration.getBody().addOrphanComment(new LineComment(leadingComment));
        } else {
            leadingComment = String.format(readFromProperties(CONSTR_COMMENT), constructorDeclaration.getName().asString());
        }
        JavadocSnippet element = new JavadocSnippet(leadingComment);
        javadocDescription.addElement(element);
        if (!constructorDeclaration.getJavadoc().isPresent()) {
            for (Parameter parameter : constructParams) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, parameter.getName().asString() + "{@link " + parameter.getType().asString() + "}");
                javadoc.addBlockTag(javadocBlockTag);
            }
            NodeList<ReferenceType> thrownExceptions = constructorDeclaration.getThrownExceptions();
            for (ReferenceType thrownException : thrownExceptions) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, thrownException.asReferenceType() + " exception levée si erreur");
                javadoc.addBlockTag(javadocBlockTag);
            }
            constructorDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateFieldJavaDoc(FieldDeclaration fieldDeclaration) {
        if (fieldDeclaration.getVariables().isNonEmpty()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String javaDocText;
            JavadocSnippet javadocSnippet;
            VariableDeclarator variableDeclarator = fieldDeclaration.getVariables().get(0);
            SimpleName fieldName = variableDeclarator.getName();
            VariableDeclarator variable = fieldDeclaration.getVariable(0);
            Type type = variable.getType();
            String valueText;
            Object assignedValue;
            if (fieldDeclaration.isStatic() && fieldDeclaration.isFinal() && variable.getInitializer().isPresent()) {
                javaDocText = readFromProperties(CONSTANT_COMMENT);
                String typeText = SINGLE_STRING_FORMAT;
                if (!type.isPrimitiveType()) {
                    typeText = readFromProperties(LINK_COMMENT);
                }
                if (type.isPrimitiveType() || STRING.equals(type.asString())) {
                    valueText = readFromProperties(FIELD_VALUE_COMMENT);
                    assignedValue = fieldName;
                } else {
                    assignedValue = StringUtils.EMPTY;
                    Optional<Expression> initializer = variable.getInitializer();
                    if (initializer.isPresent()) {
                        assignedValue = initializer.get().toString();
                    }
                    valueText = SINGLE_STRING_FORMAT;
                }
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName, String.format(typeText, type.asString()), String.format(valueText, assignedValue)));
            } else {
                javaDocText = readFromProperties(FIELD_COMMENT);
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName));
            }
            javadocDescription.addElement(javadocSnippet);
            fieldDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateMethodJavaDoc(MethodDeclaration methodDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        JavadocSnippet element;
        boolean isSetter = methodDeclaration.getName().asString().startsWith("set");
        boolean isGetter = methodDeclaration.getName().asString().startsWith("get");
        boolean isIs = methodDeclaration.getName().asString().startsWith("is");
        NodeList<Parameter> parameters = methodDeclaration.getParameters();
        String paramFormat = "%s {@link %s}";
        JavadocSnippet inheritDocSnippet = new JavadocSnippet(readFromProperties(INHERIT_DOC));
        if (!methodDeclaration.hasJavaDocComment()) {
            if (methodDeclaration.isAnnotationPresent(Override.class)) {
                javadocDescription.addElement(inheritDocSnippet);
                methodDeclaration.setJavadocComment(javadoc);
            } else {
                if (isSetter || isGetter || isIs) {
                    element = new JavadocSnippet("");
                } else if (isCamelCase(methodDeclaration.getName().asString())) {
                    element = new JavadocSnippet(StringUtils.capitalize(StringUtils.lowerCase(Utils.unCamelCase(methodDeclaration.getName().asString(), " "))));
                } else {
                    element = new JavadocSnippet(readFromProperties(TODO_METHOD_TEXT));
                }
                javadocDescription.addElement(element);
                for (Parameter parameter : parameters) {
                    JavadocBlockTag blockTag;
                    if (parameter.getType().isPrimitiveType()) {
                        paramFormat = "%s %s ";
                    }
                    if (isSetter) {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodDeclaration.getName().asString().substring(3))));
                    } else {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    }
                    javadoc.addBlockTag(blockTag);
                }
                if (!methodDeclaration.getType().isVoidType()) {
                    JavadocBlockTag javadocBlockTag;
                    if (isGetter) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodDeclaration.getName().asString().substring(3))));
                    } else if (isIs) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodDeclaration.getName().asString().substring(2))));
                    } else {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodDeclaration.getType().asString());
                    }
                    javadoc.addBlockTag(javadocBlockTag);
                }
                NodeList<ReferenceType> thrownExceptions = methodDeclaration.getThrownExceptions();
                for (ReferenceType thrownException : thrownExceptions) {
                    javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, String.format(readFromProperties(EXCEPTION_COMMENT), thrownException.asReferenceType())));
                }
                methodDeclaration.setJavadocComment(javadoc);
            }
        } else if (methodDeclaration.isAnnotationPresent(Override.class)) {
            methodDeclaration.removeJavaDocComment();
            // if the method has an old javadoc, replace it by this one :
            javadocDescription.addElement(inheritDocSnippet);
            methodDeclaration.setJavadocComment(javadoc);
        } else {
            Javadoc oldJavaDoc = javadoc;
            if (methodDeclaration.getJavadoc().isPresent()) {
                oldJavaDoc = methodDeclaration.getJavadoc().get();
            }
            oldJavaDoc.getBlockTags().clear();
            for (Parameter parameter : parameters) {
                if (parameter.getType().isPrimitiveType()) {
                    paramFormat = "%s %s ";
                }
                if (isSetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodDeclaration.getName().asString().substring(3)))));
                } else {
                    JavadocBlockTag blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    oldJavaDoc.addBlockTag(blockTag);
                }
            }
            if (!methodDeclaration.getType().isVoidType()) {
                if (isGetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodDeclaration.getName().asString().substring(3)))));
                } else if (isIs) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodDeclaration.getName().asString().substring(2)))));
                } else
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodDeclaration.getType().asString()));
            }
            methodDeclaration.setJavadocComment(oldJavaDoc);
        }
    }

    public String getPropertiesPath() {
        return propertiesPath;
    }

    public void setPropertiesPath(String propertiesPath) {
        this.propertiesPath = propertiesPath;
    }
}

00:14:08.281 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
00:14:08.282 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
00:14:08.285 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values DEFAULT_CONSTR_COMMENT
00:14:08.288 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.288 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.289 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.289 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.290 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.290 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.290 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.291 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.291 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.291 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.291 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.292 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.292 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.292 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.292 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.293 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.293 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.293 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.293 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.294 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.294 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.295 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.295 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.295 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.295 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.295 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.296 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.296 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.296 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.297 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.297 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.297 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.297 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.298 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.298 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.299 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.299 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.299 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.300 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.300 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.300 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.300 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.301 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.301 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.301 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.301 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.302 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.302 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.302 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.302 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.303 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.303 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.303 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.304 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.304 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
00:14:08.304 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
00:14:08.305 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
00:14:08.305 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:14:08.305 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:14:08.305 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
00:14:08.307 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.313 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.313 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.314 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.315 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.315 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.316 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.316 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.317 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.318 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.318 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.319 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.320 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.320 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.320 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.321 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.321 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.322 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.322 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.323 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.323 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.323 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.324 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
00:14:08.324 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.324 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
00:14:08.324 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.325 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.325 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.326 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
00:14:08.326 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.326 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.327 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.327 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.328 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.328 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
00:14:08.329 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
00:14:08.329 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
00:14:08.329 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
01:38:06.552 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
01:38:06.990 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
01:43:19.776 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
01:43:19.965 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.textutils.commons;

public enum Actions {

    DELETE("Delete"),
    DELETE_EMPTY_LINES("Delete empty lines"),
    CAPITALIZE("Capitalize"),
    TO_LOWERCASE("To lowercase"),
    TO_UPPER_CASE("To uppercase"),
    TEST_REGEX("Highlight"),
    CAPITALIZE_EACH_WORDS("Capitalize each word"),
    CAMELCASE("CamelCase"),
    UNCAMELCASE("Decompose CamelCase"),
    REDUCE_WHITE_SPACE("Reduce white spaces"),
    ENCODE_64("Encode 64"),
    DECODE_64("Decode 64"),
    INDENT("Indent"),
    REPLACE_ACCENTED("Replace accented letters"),
    DELETE_SYMBOLS("Delete symbols"),
    RANDOM_STRING("Random String"),
    DELETE_LINES("Delete lines"),
    UNDO("undo"),
    REDO("redo"),
    ADD_LINE("Add line at");

    private String label;

    Actions(String label) {
        this.label = label;
    }

    public String getLabel() {
        return label;
    }
}

01:47:17.021 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : generateEnumJavaDoc with values public enum Actions {

    DELETE("Delete"),
    DELETE_EMPTY_LINES("Delete empty lines"),
    CAPITALIZE("Capitalize"),
    TO_LOWERCASE("To lowercase"),
    TO_UPPER_CASE("To uppercase"),
    TEST_REGEX("Highlight"),
    CAPITALIZE_EACH_WORDS("Capitalize each word"),
    CAMELCASE("CamelCase"),
    UNCAMELCASE("Decompose CamelCase"),
    REDUCE_WHITE_SPACE("Reduce white spaces"),
    ENCODE_64("Encode 64"),
    DECODE_64("Decode 64"),
    INDENT("Indent"),
    REPLACE_ACCENTED("Replace accented letters"),
    DELETE_SYMBOLS("Delete symbols"),
    RANDOM_STRING("Random String"),
    DELETE_LINES("Delete lines"),
    UNDO("undo"),
    REDO("redo"),
    ADD_LINE("Add line at");

    private String label;

    Actions(String label) {
        this.label = label;
    }

    public String getLabel() {
        return label;
    }
}
01:47:17.025 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
01:47:17.031 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
01:47:17.033 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
01:47:17.035 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
01:47:17.049 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:10:17.734 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
02:10:18.034 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
02:10:35.345 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:10:35.544 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

public class FxController {

    @FXML
    TextArea inputText;

    @FXML
    HBox buttons;

    @FXML
    public void initialize() throws IOException {
        try {
            ActionButton button = new ActionButton();
        } catch (Exception e) {
            System.out.println("HELLO");
        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

02:10:35.551 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_ENUM_TEXT
02:10:35.551 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:10:35.551 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:10:35.554 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:10:35.555 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:10:35.556 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:10:35.557 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
02:10:35.557 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:10:35.558 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:10:35.563 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:10:52.631 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:10:52.641 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.textutils.commons;

public enum Actions {

    DELETE("Delete"),
    DELETE_EMPTY_LINES("Delete empty lines"),
    CAPITALIZE("Capitalize"),
    TO_LOWERCASE("To lowercase"),
    TO_UPPER_CASE("To uppercase"),
    TEST_REGEX("Highlight"),
    CAPITALIZE_EACH_WORDS("Capitalize each word"),
    CAMELCASE("CamelCase"),
    UNCAMELCASE("Decompose CamelCase"),
    REDUCE_WHITE_SPACE("Reduce white spaces"),
    ENCODE_64("Encode 64"),
    DECODE_64("Decode 64"),
    INDENT("Indent"),
    REPLACE_ACCENTED("Replace accented letters"),
    DELETE_SYMBOLS("Delete symbols"),
    RANDOM_STRING("Random String"),
    DELETE_LINES("Delete lines"),
    UNDO("undo"),
    REDO("redo"),
    ADD_LINE("Add line at");

    private String label;

    Actions(String label) {
        this.label = label;
    }

    public String getLabel() {
        return label;
    }
}

02:10:52.642 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_ENUM_TEXT
02:10:52.642 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:10:52.642 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:10:52.642 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
02:10:52.644 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:10:52.644 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:10:52.644 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:10:52.644 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:16:54.549 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
02:16:54.931 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
02:24:34.880 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
02:24:35.179 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
02:24:51.959 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:24:58.584 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:24:58.602 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

public class FxController {

    @FXML
    TextArea inputText;

    @FXML
    HBox buttons;

    @FXML
    public void initialize() throws IOException {
        try {
            ActionButton button = new ActionButton();
        } catch (Exception e) {
            System.out.println("HELLO");
        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

02:24:58.608 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_ENUM_TEXT
02:24:58.608 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:24:58.608 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:24:58.611 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:24:58.611 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:24:58.612 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:24:58.613 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
02:24:58.613 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:24:58.613 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:24:58.619 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:25:08.372 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:25:11.385 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:25:11.387 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.gui;

import javafx.scene.control.Button;
import musta.belmo.utils.textutils.commons.Actions;

public class ActionButton extends Button {

    private Actions actions;

    public void setActions(Actions actions) {
        this.actions = actions;
    }

    public Actions getActions() {
        return actions;
    }
}

02:25:11.388 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_ENUM_TEXT
02:25:11.388 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:25:11.388 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:25:11.389 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:25:11.389 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:25:11.390 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
02:25:11.390 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:25:11.391 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:25:11.391 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:25:22.802 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:25:27.207 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:25:27.210 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.textutils.commons;

public enum Actions {

    DELETE("Delete"),
    DELETE_EMPTY_LINES("Delete empty lines"),
    CAPITALIZE("Capitalize"),
    TO_LOWERCASE("To lowercase"),
    TO_UPPER_CASE("To uppercase"),
    TEST_REGEX("Highlight"),
    CAPITALIZE_EACH_WORDS("Capitalize each word"),
    CAMELCASE("CamelCase"),
    UNCAMELCASE("Decompose CamelCase"),
    REDUCE_WHITE_SPACE("Reduce white spaces"),
    ENCODE_64("Encode 64"),
    DECODE_64("Decode 64"),
    INDENT("Indent"),
    REPLACE_ACCENTED("Replace accented letters"),
    DELETE_SYMBOLS("Delete symbols"),
    RANDOM_STRING("Random String"),
    DELETE_LINES("Delete lines"),
    UNDO("undo"),
    REDO("redo"),
    ADD_LINE("Add line at");

    private String label;

    Actions(String label) {
        this.label = label;
    }

    public String getLabel() {
        return label;
    }
}

02:25:27.211 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_ENUM_TEXT
02:25:27.211 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:25:27.211 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:25:27.212 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
02:25:27.213 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:25:27.213 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:25:27.213 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:25:27.213 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:30:15.455 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
02:30:15.731 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
02:30:29.198 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:30:30.985 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:30:31.009 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

public class FxController {

    @FXML
    TextArea inputText;

    @FXML
    HBox buttons;

    @FXML
    public void initialize() throws IOException {
        try {
            ActionButton button = new ActionButton();
        } catch (Exception e) {
            System.out.println("HELLO");
        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

02:30:31.014 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_CLASS_TEXT
02:30:31.031 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:30:31.032 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:30:31.035 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:30:31.035 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:30:31.036 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:30:31.037 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
02:30:31.037 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:30:31.037 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:30:31.043 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:33:01.974 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:33:04.113 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:33:04.178 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.javacodegenerator.service;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.comments.LineComment;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.javadoc.Javadoc;
import com.github.javaparser.javadoc.JavadocBlockTag;
import com.github.javaparser.javadoc.description.JavadocDescription;
import com.github.javaparser.javadoc.description.JavadocSnippet;
import musta.belmo.javacodecore.logger.Level;
import musta.belmo.javacodecore.logger.MustaLogger;
import musta.belmo.javacodegenerator.FormattedJavadocBlockTag;
import musta.belmo.javacodecore.Utils;
import musta.belmo.javacodecore.ZipUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Optional;
import java.util.Properties;

public class JavaDocGenerator {

    private static final String ATTRIBUT_COMMENT_FORMAT = "ATTRIBUT_COMMENT_FORMAT";

    private static final String UTF_8 = "UTF-8";

    private static final String TODO_METHOD_TEXT = "TODO_METHOD_TEXT";

    private static final String INHERIT_DOC = "INHERIT_DOC";

    private static final String SETTER_COMMENT = "SETTER_COMMENT";

    private static final String FIELD_COMMENT = "FIELD_COMMENT";

    private static final String CONSTANT_COMMENT = "CONSTANT_COMMENT";

    private static final String LINK_COMMENT = "LINK_COMMENT";

    private static final String STRING = "String";

    private static final String FIELD_VALUE_COMMENT = "FIELD_VALUE_COMMENT";

    private static final String SINGLE_STRING_FORMAT = "%s";

    private static final String CONSTR_COMMENT = "CONSTR_COMMENT";

    private static final String DEFAULT_CONSTR_COMMENT = "DEFAULT_CONSTR_COMMENT";

    private static final String EXCEPTION_COMMENT = "EXCEPTION_COMMENT";

    private static final String JAVA_EXTENSION = "java";

    private static final String ZIP_EXTENSION = ".zip";

    private static final String SINCE_VERSION = "SINCE_VERSION";

    private static final String AUTHOR = "AUTHOR";

    private static final String APPLICATION_PROPERTIES = "application.properties";

    private static final String TODO_CLASS_TEXT = "TODO_CLASS_TEXT";

    private static final String TODO_ENUM_TEXT = "TODO_ENUM_TEXT";

    private String propertiesPath;

    private Properties properties;

    private final MustaLogger logger;

    public JavaDocGenerator() {
        logger = new MustaLogger(getClass());
        loadProperties(null);
    // Constructeur par défaut
    }

    private String readFromProperties(String key) {
        logger.logCurrentMethod(Level.DEBUG, key);
        return properties.getProperty(key);
    }

    public void loadProperties(String propertiesPath) {
        logger.logCurrentMethod(Level.DEBUG, propertiesPath);
        URL resource = null;
        if (propertiesPath == null) {
            resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
        } else {
            File file = new File(propertiesPath);
            try {
                resource = file.toURI().toURL();
            } catch (MalformedURLException e) {
                logger.error(propertiesPath, e);
            }
            if (resource == null) {
                resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
            }
        }
        if (resource != null) {
            properties = new Properties();
            try {
                InputStream resourceAsStream = resource.openStream();
                properties.load(resourceAsStream);
            } catch (IOException e) {
                logger.error("readFromProperties", e);
            }
        }
        this.propertiesPath = propertiesPath;
    }

    public void generateJavaDocForAllClasses(File directory, File dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.logCurrentMethod(Level.DEBUG, directory, dest);
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File destinationZip = new File(dest.getAbsolutePath());
        boolean isDirectory = directory.isDirectory();
        if (isDirectory) {
            Collection<File> files = FileUtils.listFiles(directory, new String[] { JAVA_EXTENSION }, true);
            for (File file : files) {
                generateJavaDoc(file.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
            }
        } else {
            generateJavaDoc(directory.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
        }
        if (toZip) {
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(".zip")));
            logger.info("file add to zip file {}", destinationZip.getAbsolutePath());
        }
        logger.info("generateJavaDocForAllClasses : done");
    }

    public void generateJavaDocForAllClasses(String directory, String dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File dir = new File(directory);
        File destinationZip = new File(dest);
        generateJavaDocForAllClasses(dir, destinationZip, toZip, deleteOldJavadoc);
        logger.info("generateJavaDocForAllClasses : done");
    }

    private void deleteJavaDocForAllClasses(String directory, String dest, boolean toZip) throws Exception {
        File dir = new File(directory);
        if (dir.isDirectory()) {
            Collection<File> files = FileUtils.listFiles(dir, new String[] { JAVA_EXTENSION }, toZip);
            for (File file : files) {
                deleteJavaDoc(file.getAbsolutePath(), dest);
            }
        } else {
            deleteJavaDoc(dir.getAbsolutePath(), dest);
        }
        if (toZip) {
            File destinationZip = new File(dest);
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(ZIP_EXTENSION)));
        }
    }

    public void generateJavaDoc(String srcPath, String destinationFile, boolean deleteOldJavaDoc) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        String javaDocAsString = generateJavaDocAsString(compilationUnit.toString(), deleteOldJavaDoc);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        FileUtils.write(destFile, javaDocAsString, UTF_8);
        logger.info("generated javadoc for  file {}", srcPath);
    }

    @SuppressWarnings("unchecked")
    private void generateJavaDocForTypeDeclaration(TypeDeclaration enumDeclaration) {
        if (!enumDeclaration.hasJavaDocComment()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String text = readFromProperties(TODO_CLASS_TEXT);
            if (enumDeclaration.isEnumDeclaration()) {
                text = readFromProperties(TODO_ENUM_TEXT);
            }
            JavadocSnippet element = new JavadocSnippet(text);
            javadocDescription.addElement(element);
            String author = readFromProperties(AUTHOR);
            String since = readFromProperties(SINCE_VERSION);
            if (author != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, author));
            if (since != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, since));
            enumDeclaration.setJavadocComment(javadoc);
        } else {
            Optional<Javadoc> optionalJavaDoc = enumDeclaration.getJavadoc();
            optionalJavaDoc.ifPresent(javadoc -> {
                javadoc.getBlockTags().removeIf(blockTag -> JavadocBlockTag.Type.SINCE.equals(blockTag.getType()));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, readFromProperties(SINCE_VERSION)));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, readFromProperties(AUTHOR)));
                enumDeclaration.setJavadocComment(javadoc);
            });
        }
    }

    public String generateJavaDocAsString(String src, boolean deleteOldJavaDoc) throws IOException {
        return generateJavaDocAsString(JavaParser.parse(src), deleteOldJavaDoc);
    }

    public String generateJavaDocAsString(CompilationUnit compilationUnit, boolean deleteOldJavaDoc) throws IOException {
        if (deleteOldJavaDoc) {
            deleteOldJavaDoc(compilationUnit);
            logger.info("deleted javadoc for  source code {}", compilationUnit.toString());
        }
        compilationUnit.findAll(TypeDeclaration.class).forEach(this::generateJavaDocForTypeDeclaration);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(this::generateConstructorJavaDoc);
        compilationUnit.findAll(FieldDeclaration.class).forEach(this::generateFieldJavaDoc);
        compilationUnit.findAll(MethodDeclaration.class).forEach(this::generateMethodJavaDoc);
        logger.info("generated javadoc for  source code");
        return compilationUnit.toString();
    }

    public void deleteSettersForLists(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        compilationUnit.findAll(MethodDeclaration.class).stream().filter(methodDeclaration -> {
            boolean paramListExists = false;
            if (methodDeclaration.getName().asString().startsWith("set")) {
                for (Parameter parameter : methodDeclaration.getParameters()) {
                    if (parameter.getType().asString().contains("List<")) {
                        paramListExists = true;
                        break;
                    }
                }
            }
            return paramListExists;
        }).forEach(MethodDeclaration::remove);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
    }

    public void removeVolatileModifier(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        compilationUnit.findAll(FieldDeclaration.class).forEach(fieldDeclaration -> {
            EnumSet<Modifier> modifiers = fieldDeclaration.getModifiers();
            modifiers.remove(Modifier.VOLATILE);
        });
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        System.out.println(compilationUnit);
    }

    public void addNOSONAR(String srcPath, String destinationFile, String justification) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        compilationUnit.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {
            if (methodDeclaration.getName().asString().startsWith("get") && methodDeclaration.getType().asString().contains("List<")) {
                BlockStmt blockStmt = methodDeclaration.getBody().get();
                for (Statement statement : blockStmt.getStatements()) {
                    if (statement.isReturnStmt()) {
                        statement.setLineComment(String.format("NOSONAR :%s", justification));
                    }
                }
            }
        });
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        System.out.println(compilationUnit);
    }

    private File getDestination(String destinationFile, File srcFile, CompilationUnit compilationUnit) {
        return compilationUnit.getPackageDeclaration().map(packageDeclaration -> new File(destinationFile, Utils.convertPackageDeclarationToPath(packageDeclaration.getName().asString()) + File.separator + srcFile.getName())).orElseGet(() -> new File(destinationFile));
    }

    private boolean isCamelCase(String s) {
        return s != null && s.matches("[a-z]+[A-Z\\d]+\\w+");
    }

    public void deleteJavaDoc(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        deleteOldJavaDoc(compilationUnit);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        logger.info("deleted javadoc for  file {}", srcPath);
    }

    private void deleteOldJavaDoc(CompilationUnit compilationUnit) {
        compilationUnit.findAll(TypeDeclaration.class).forEach(TypeDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(ConstructorDeclaration::removeJavaDocComment);
        compilationUnit.findAll(FieldDeclaration.class).forEach(FieldDeclaration::removeJavaDocComment);
        compilationUnit.findAll(MethodDeclaration.class).forEach(MethodDeclaration::removeJavaDocComment);
    }

    public String deleteJavaDoc(String src) {
        CompilationUnit compilationUnit = JavaParser.parse(src);
        deleteOldJavaDoc(compilationUnit);
        return compilationUnit.toString();
    }

    private void generateConstructorJavaDoc(ConstructorDeclaration constructorDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        NodeList<Parameter> constructParams = constructorDeclaration.getParameters();
        String leadingComment;
        if (constructParams.isEmpty() && constructorDeclaration.getBody().getOrphanComments().isEmpty()) {
            leadingComment = readFromProperties(DEFAULT_CONSTR_COMMENT);
            constructorDeclaration.getBody().addOrphanComment(new LineComment(leadingComment));
        } else {
            leadingComment = String.format(readFromProperties(CONSTR_COMMENT), constructorDeclaration.getName().asString());
        }
        JavadocSnippet element = new JavadocSnippet(leadingComment);
        javadocDescription.addElement(element);
        if (!constructorDeclaration.getJavadoc().isPresent()) {
            for (Parameter parameter : constructParams) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format("%s{@link %s}", parameter.getName().asString(), parameter.getType().asString()));
                javadoc.addBlockTag(javadocBlockTag);
            }
            NodeList<ReferenceType> thrownExceptions = constructorDeclaration.getThrownExceptions();
            for (ReferenceType thrownException : thrownExceptions) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, String.format(readFromProperties(EXCEPTION_COMMENT), thrownException.asReferenceType()));
                javadoc.addBlockTag(javadocBlockTag);
            }
            constructorDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateFieldJavaDoc(FieldDeclaration fieldDeclaration) {
        if (fieldDeclaration.getVariables().isNonEmpty()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String javaDocText;
            JavadocSnippet javadocSnippet;
            VariableDeclarator variableDeclarator = fieldDeclaration.getVariables().get(0);
            SimpleName fieldName = variableDeclarator.getName();
            VariableDeclarator variable = fieldDeclaration.getVariable(0);
            Type type = variable.getType();
            String valueText;
            Object assignedValue;
            if (fieldDeclaration.isStatic() && fieldDeclaration.isFinal() && variable.getInitializer().isPresent()) {
                javaDocText = readFromProperties(CONSTANT_COMMENT);
                String typeText = SINGLE_STRING_FORMAT;
                if (!type.isPrimitiveType()) {
                    typeText = readFromProperties(LINK_COMMENT);
                }
                if (type.isPrimitiveType() || STRING.equals(type.asString())) {
                    valueText = readFromProperties(FIELD_VALUE_COMMENT);
                    assignedValue = fieldName;
                } else {
                    assignedValue = StringUtils.EMPTY;
                    Optional<Expression> initializer = variable.getInitializer();
                    if (initializer.isPresent()) {
                        assignedValue = initializer.get().toString();
                    }
                    valueText = SINGLE_STRING_FORMAT;
                }
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName, String.format(typeText, type.asString()), String.format(valueText, assignedValue)));
            } else {
                javaDocText = readFromProperties(FIELD_COMMENT);
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName));
            }
            javadocDescription.addElement(javadocSnippet);
            fieldDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateMethodJavaDoc(MethodDeclaration methodDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        JavadocSnippet element;
        String methodName = methodDeclaration.getName().asString();
        boolean isSetter = methodName.startsWith("set");
        boolean isGetter = methodName.startsWith("get");
        boolean isIs = methodName.startsWith("is");
        NodeList<Parameter> parameters = methodDeclaration.getParameters();
        String paramFormat = "%s {@link %s}";
        JavadocSnippet inheritDocSnippet = new JavadocSnippet(readFromProperties(INHERIT_DOC));
        if (!methodDeclaration.hasJavaDocComment()) {
            if (methodDeclaration.isAnnotationPresent(Override.class)) {
                javadocDescription.addElement(inheritDocSnippet);
                methodDeclaration.setJavadocComment(javadoc);
            } else {
                if (isSetter || isGetter || isIs) {
                    element = new JavadocSnippet("");
                } else if (isCamelCase(methodName)) {
                    element = new JavadocSnippet(StringUtils.capitalize(StringUtils.lowerCase(Utils.unCamelCase(methodName, " "))));
                } else {
                    element = new JavadocSnippet(readFromProperties(TODO_METHOD_TEXT));
                }
                javadocDescription.addElement(element);
                for (Parameter parameter : parameters) {
                    JavadocBlockTag blockTag;
                    if (parameter.getType().isPrimitiveType()) {
                        paramFormat = "%s %s ";
                    }
                    if (isSetter) {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    }
                    javadoc.addBlockTag(blockTag);
                }
                if (!methodDeclaration.getType().isVoidType()) {
                    JavadocBlockTag javadocBlockTag;
                    if (isGetter) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else if (isIs) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2))));
                    } else {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodDeclaration.getType().asString());
                    }
                    javadoc.addBlockTag(javadocBlockTag);
                }
                NodeList<ReferenceType> thrownExceptions = methodDeclaration.getThrownExceptions();
                for (ReferenceType thrownException : thrownExceptions) {
                    javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, String.format(readFromProperties(EXCEPTION_COMMENT), thrownException.asReferenceType())));
                }
                methodDeclaration.setJavadocComment(javadoc);
            }
        } else if (methodDeclaration.isAnnotationPresent(Override.class)) {
            methodDeclaration.removeJavaDocComment();
            // if the method has an old javadoc, replace it by this one :
            javadocDescription.addElement(inheritDocSnippet);
            methodDeclaration.setJavadocComment(javadoc);
        } else {
            Javadoc oldJavaDoc = javadoc;
            if (methodDeclaration.getJavadoc().isPresent()) {
                oldJavaDoc = methodDeclaration.getJavadoc().get();
            }
            oldJavaDoc.getBlockTags().clear();
            for (Parameter parameter : parameters) {
                if (parameter.getType().isPrimitiveType()) {
                    paramFormat = "%s %s ";
                }
                if (isSetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else {
                    JavadocBlockTag blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    oldJavaDoc.addBlockTag(blockTag);
                }
            }
            if (!methodDeclaration.getType().isVoidType()) {
                if (isGetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else if (isIs) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2)))));
                } else
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodDeclaration.getType().asString()));
            }
            methodDeclaration.setJavadocComment(oldJavaDoc);
        }
    }

    public String getPropertiesPath() {
        return propertiesPath;
    }

    public void setPropertiesPath(String propertiesPath) {
        this.propertiesPath = propertiesPath;
    }
}

02:33:04.207 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_CLASS_TEXT
02:33:04.208 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:33:04.208 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:33:04.215 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
02:33:04.217 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.218 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.218 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.219 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.219 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.219 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.219 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.219 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.220 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.220 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.220 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.220 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.221 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.221 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.221 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.221 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.221 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.222 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.222 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.222 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.222 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.223 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.223 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.223 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.223 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.237 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.238 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.238 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.238 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.238 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.239 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.239 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.239 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.239 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.240 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.241 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.241 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.241 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.241 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.241 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.241 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.241 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.242 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.242 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.242 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.242 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.242 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.242 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.242 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.243 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.243 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.243 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.243 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.243 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.244 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.244 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.244 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.244 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.245 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.245 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.246 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTANT_COMMENT
02:33:04.246 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values LINK_COMMENT
02:33:04.246 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_VALUE_COMMENT
02:33:04.246 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:33:04.246 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:33:04.246 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:33:04.247 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.248 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.248 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.249 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.249 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.250 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.250 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.251 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.252 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.252 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.252 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.252 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.252 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.252 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.253 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.253 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.253 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.254 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.255 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.255 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.255 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.255 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.256 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:33:04.256 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.256 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:33:04.257 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.257 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:33:04.257 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.258 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.258 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.259 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.259 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.259 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.260 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:33:04.260 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:33:04.260 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
02:33:04.260 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:55:30.725 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
02:55:31.014 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
02:55:40.261 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:55:43.384 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:55:43.407 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.utils.fx.controller;

import com.sun.javafx.scene.control.behavior.TextAreaBehavior;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import musta.belmo.utils.fx.gui.ActionButton;
import musta.belmo.utils.textutils.commons.Actions;
import musta.belmo.utils.textutils.commons.Commons;
import musta.belmo.utils.textutils.commons.Functions;
import org.kordamp.ikonli.fontawesome.FontAwesome;
import org.kordamp.ikonli.javafx.FontIcon;
import java.io.IOException;

public class FxController {

    @FXML
    TextArea inputText;

    @FXML
    HBox buttons;

    @FXML
    public void initialize() throws IOException {
        try {
            ActionButton button = new ActionButton();
        } catch (Exception e) {
            System.out.println("HELLO");
        }
        TextAreaBehavior textAreaBehavior = new TextAreaBehavior(inputText);
        textAreaBehavior.dispose();
        VBox[] vBoxes = new VBox[(Actions.values().length / 4) + 1];
        for (int i = 0; i < vBoxes.length; i++) {
            vBoxes[i] = new VBox();
            buttons.getChildren().addAll(vBoxes[i]);
        }
        int y = 0;
        int idx = 0;
        for (Actions actions : Actions.values()) {
            ActionButton button = new ActionButton();
            String iconDescription = Commons.readFromProperties(actions.name());
            button.setGraphic(FontIcon.of(FontAwesome.findByDescription(iconDescription)));
            button.setActions(actions);
            Tooltip tooltip = new Tooltip();
            tooltip.setText(actions.getLabel());
            button.setTooltip(tooltip);
            button.setOnAction(this::editText);
            if (y != 0 && y % 4 == 0) {
                idx++;
            }
            vBoxes[idx].getChildren().add(button);
            y++;
        }
    }

    public void editText(ActionEvent actionEvent) {
        Actions actions = ((ActionButton) actionEvent.getSource()).getActions();
        if (actions != null) {
            switch(actions) {
                case DELETE_EMPTY_LINES:
                    inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
                    break;
                case CAPITALIZE:
                    inputText.setText(Functions.capitalize(inputText.getText()));
                    break;
                case CAMELCASE:
                    inputText.setText(Functions.camelCase(inputText.getText()));
                    break;
                case TO_UPPER_CASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), true));
                    break;
                case TO_LOWERCASE:
                    inputText.setText(Functions.changeCase(inputText.getText(), false));
                    break;
                case TEST_REGEX:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to highlight:", "");
                        List<HighlightPosition> highlights = Functions.getHighlights(inputText.getText(),
                                inputDialog);
                        inputText.addHighlisghts(highlights);
                   */
                    break;
                case CAPITALIZE_EACH_WORDS:
                    inputText.setText(Functions.capitalizeEachWord(inputText.getText()));
                    break;
                case DELETE:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Enter REGEX pattern to delete:", "");
                        String result = Functions.delete(inputText.getText(), inputDialog);
                        inputText.setText(result);
                     */
                    break;
                case REDUCE_WHITE_SPACE:
                    inputText.setText(Functions.reduceWhiteSpaces(inputText.getText()));
                    break;
                case ENCODE_64:
                    inputText.setText(Functions.encode64(inputText.getText()));
                    break;
                case DECODE_64:
                    inputText.setText(Functions.decode64(inputText.getText()));
                    break;
                case INDENT:
                    inputText.setText(Functions.indent(inputText.getText()));
                    break;
                case UNCAMELCASE:
                    inputText.setText(Functions.uncamelcase(inputText.getText()));
                    break;
                case REPLACE_ACCENTED:
                    inputText.setText(Functions.replaceAccentedLetters(inputText.getText()));
                    break;
                case DELETE_SYMBOLS:
                    inputText.setText(Functions.deleteSymbols(inputText.getText()));
                    break;
                case RANDOM_STRING:
                    /*
                        int length = 0;
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "Random String length:", "0");
                        if (StringUtils.isNumeric(inputDialog)) {
                            length = Integer.parseInt(inputDialog);
                            if (length < 0) {
                                length = 0;
                            }
                        }
                        inputText.setText(Functions.randomString(length));
                     */
                    break;
                case DELETE_LINES:
                    /*
                        String inputDialog = JOptionPane.showInputDialog(this.mPanel, "lines to be deleted:\n(separated by space or ,)", "");
                        String[] linesStr = inputDialog.split("[,\\s;]");
                        Integer[] lines = new Integer[linesStr.length];
                        for (int i = 0; i < linesStr.length; i++) {
                            lines[i] = Integer.valueOf(linesStr[i]);
                        }
                        String deleteLines = Functions.deleteLines(inputText.getText(), lines);

                        inputText.setText(deleteLines);
                   */
                    break;
                case REDO:
                    // inputText.redo();
                    break;
                case UNDO:
                    // inputText.undo();
                    break;
                case ADD_LINE:
                    /*
                        FileChooser fileChooser = new FileChooser();
                        fileChooser.asOpenDialog()
                                .showDialog(null, "Ouvrir");

                        fileChooser.doWhenApproved(() -> {
                            File chosenFile = fileChooser.getSelectedFile();
                            String textWithAddedLines = Functions.addLinesAt(inputText.getText(), chosenFile);
                            inputText.setText(textWithAddedLines);
                        }).doWhenCanceled(() -> System.out.println("File Chooser Canceled"));
                   */
                    break;
            }
        }
        inputText.setText(Functions.deleteEmptyLines(inputText.getText()));
    }
}

02:55:43.410 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_CLASS_TEXT
02:55:43.411 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:55:43.411 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:55:43.414 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:55:43.414 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:55:43.415 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:55:43.416 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_METHOD_TEXT
02:55:43.416 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:55:43.417 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:55:43.423 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
02:58:35.088 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - start 
02:58:35.497 [JavaFX Application Thread] INFO  m.b.j.g.a.AbstractJavaFXApplication - root set 
02:58:52.702 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:58:55.225 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
02:58:55.295 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.javacodegenerator.service;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.comments.LineComment;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.javadoc.Javadoc;
import com.github.javaparser.javadoc.JavadocBlockTag;
import com.github.javaparser.javadoc.description.JavadocDescription;
import com.github.javaparser.javadoc.description.JavadocSnippet;
import musta.belmo.javacodecore.logger.Level;
import musta.belmo.javacodecore.logger.MustaLogger;
import musta.belmo.javacodegenerator.FormattedJavadocBlockTag;
import musta.belmo.javacodecore.Utils;
import musta.belmo.javacodecore.ZipUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Optional;
import java.util.Properties;

public class JavaDocGenerator implements GeneratorConstantes {

    private String propertiesPath;

    private Properties properties;

    private final MustaLogger logger;

    public JavaDocGenerator() {
        logger = new MustaLogger(getClass());
        loadProperties(null);
    // Constructeur par défaut
    }

    private String readFromProperties(String key) {
        logger.logCurrentMethod(Level.DEBUG, key);
        return properties.getProperty(key);
    }

    public void loadProperties(String propertiesPath) {
        logger.logCurrentMethod(Level.DEBUG, propertiesPath);
        URL resource = null;
        if (propertiesPath == null) {
            resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
        } else {
            File file = new File(propertiesPath);
            try {
                resource = file.toURI().toURL();
            } catch (MalformedURLException e) {
                logger.error(propertiesPath, e);
            }
            if (resource == null) {
                resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
            }
        }
        if (resource != null) {
            properties = new Properties();
            try {
                InputStream resourceAsStream = resource.openStream();
                properties.load(resourceAsStream);
            } catch (IOException e) {
                logger.error("readFromProperties", e);
            }
        }
        this.propertiesPath = propertiesPath;
    }

    public void generateJavaDocForAllClasses(File directory, File dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.logCurrentMethod(Level.DEBUG, directory, dest);
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File destinationZip = new File(dest.getAbsolutePath());
        boolean isDirectory = directory.isDirectory();
        if (isDirectory) {
            Collection<File> files = FileUtils.listFiles(directory, new String[] { JAVA_EXTENSION }, true);
            for (File file : files) {
                generateJavaDoc(file.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
            }
        } else {
            generateJavaDoc(directory.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
        }
        if (toZip) {
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(".zip")));
            logger.info("file add to zip file {}", destinationZip.getAbsolutePath());
        }
        logger.info("generateJavaDocForAllClasses : done");
    }

    public void generateJavaDocForAllClasses(String directory, String dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File dir = new File(directory);
        File destinationZip = new File(dest);
        generateJavaDocForAllClasses(dir, destinationZip, toZip, deleteOldJavadoc);
        logger.info("generateJavaDocForAllClasses : done");
    }

    private void deleteJavaDocForAllClasses(String directory, String dest, boolean toZip) throws Exception {
        File dir = new File(directory);
        if (dir.isDirectory()) {
            Collection<File> files = FileUtils.listFiles(dir, new String[] { JAVA_EXTENSION }, toZip);
            for (File file : files) {
                deleteJavaDoc(file.getAbsolutePath(), dest);
            }
        } else {
            deleteJavaDoc(dir.getAbsolutePath(), dest);
        }
        if (toZip) {
            File destinationZip = new File(dest);
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(ZIP_EXTENSION)));
        }
    }

    public void generateJavaDoc(String srcPath, String destinationFile, boolean deleteOldJavaDoc) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        String javaDocAsString = generateJavaDocAsString(compilationUnit.toString(), deleteOldJavaDoc);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        FileUtils.write(destFile, javaDocAsString, UTF_8);
        logger.info("generated javadoc for  file {}", srcPath);
    }

    @SuppressWarnings("unchecked")
    private void generateJavaDocForTypeDeclaration(TypeDeclaration enumDeclaration) {
        if (!enumDeclaration.hasJavaDocComment()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String text = readFromProperties(TODO_CLASS_TEXT);
            if (enumDeclaration.isEnumDeclaration()) {
                text = readFromProperties(TODO_ENUM_TEXT);
            }
            JavadocSnippet element = new JavadocSnippet(text);
            javadocDescription.addElement(element);
            String author = readFromProperties(AUTHOR);
            String since = readFromProperties(SINCE_VERSION);
            if (author != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, author));
            if (since != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, since));
            enumDeclaration.setJavadocComment(javadoc);
        } else {
            Optional<Javadoc> optionalJavaDoc = enumDeclaration.getJavadoc();
            optionalJavaDoc.ifPresent(javadoc -> {
                javadoc.getBlockTags().removeIf(blockTag -> JavadocBlockTag.Type.SINCE.equals(blockTag.getType()));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, readFromProperties(SINCE_VERSION)));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, readFromProperties(AUTHOR)));
                enumDeclaration.setJavadocComment(javadoc);
            });
        }
    }

    public String generateJavaDocAsString(String src, boolean deleteOldJavaDoc) throws IOException {
        return generateJavaDocAsString(JavaParser.parse(src), deleteOldJavaDoc);
    }

    public String generateJavaDocAsString(CompilationUnit compilationUnit, boolean deleteOldJavaDoc) throws IOException {
        if (deleteOldJavaDoc) {
            deleteOldJavaDoc(compilationUnit);
            logger.info("deleted javadoc for  source code {}", compilationUnit.toString());
        }
        compilationUnit.findAll(TypeDeclaration.class).forEach(this::generateJavaDocForTypeDeclaration);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(this::generateConstructorJavaDoc);
        compilationUnit.findAll(FieldDeclaration.class).forEach(this::generateFieldJavaDoc);
        compilationUnit.findAll(MethodDeclaration.class).forEach(this::generateMethodJavaDoc);
        logger.info("generated javadoc for  source code");
        return compilationUnit.toString();
    }

    private File getDestination(String destinationFile, File srcFile, CompilationUnit compilationUnit) {
        return compilationUnit.getPackageDeclaration().map(packageDeclaration -> new File(destinationFile, Utils.convertPackageDeclarationToPath(packageDeclaration.getName().asString()) + File.separator + srcFile.getName())).orElseGet(() -> new File(destinationFile));
    }

    public void deleteJavaDoc(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        deleteOldJavaDoc(compilationUnit);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        logger.info("deleted javadoc for  file {}", srcPath);
    }

    private void deleteOldJavaDoc(CompilationUnit compilationUnit) {
        compilationUnit.findAll(TypeDeclaration.class).forEach(TypeDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(ConstructorDeclaration::removeJavaDocComment);
        compilationUnit.findAll(FieldDeclaration.class).forEach(FieldDeclaration::removeJavaDocComment);
        compilationUnit.findAll(MethodDeclaration.class).forEach(MethodDeclaration::removeJavaDocComment);
    }

    public String deleteJavaDoc(String src) {
        CompilationUnit compilationUnit = JavaParser.parse(src);
        deleteOldJavaDoc(compilationUnit);
        return compilationUnit.toString();
    }

    private void generateConstructorJavaDoc(ConstructorDeclaration constructorDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        NodeList<Parameter> constructParams = constructorDeclaration.getParameters();
        String leadingComment;
        if (constructParams.isEmpty() && (constructorDeclaration.getBody().getStatements().isEmpty())) {
            leadingComment = readFromProperties(DEFAULT_CONSTR_COMMENT);
            constructorDeclaration.getBody().addOrphanComment(new LineComment(leadingComment));
        } else {
            leadingComment = String.format(readFromProperties(CONSTR_COMMENT), constructorDeclaration.getName().asString());
        }
        JavadocSnippet element = new JavadocSnippet(leadingComment);
        javadocDescription.addElement(element);
        if (!constructorDeclaration.getJavadoc().isPresent()) {
            for (Parameter parameter : constructParams) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format("%s{@link %s}", parameter.getName().asString(), parameter.getType().asString()));
                javadoc.addBlockTag(javadocBlockTag);
            }
            NodeList<ReferenceType> thrownExceptions = constructorDeclaration.getThrownExceptions();
            addExceptionsToJavaDoc(thrownExceptions, javadoc);
            constructorDeclaration.setJavadocComment(javadoc);
        }
    }

    private void addExceptionsToJavaDoc(NodeList<ReferenceType> thrownExceptions, Javadoc javadoc) {
        for (ReferenceType thrownException : thrownExceptions) {
            FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, String.format(readFromProperties(EXCEPTION_COMMENT), thrownException.asReferenceType()));
            javadoc.addBlockTag(javadocBlockTag);
        }
    }

    private void generateFieldJavaDoc(FieldDeclaration fieldDeclaration) {
        if (fieldDeclaration.getVariables().isNonEmpty()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String javaDocText;
            JavadocSnippet javadocSnippet;
            VariableDeclarator variableDeclarator = fieldDeclaration.getVariables().get(0);
            SimpleName fieldName = variableDeclarator.getName();
            VariableDeclarator variable = fieldDeclaration.getVariable(0);
            Type type = variable.getType();
            String valueText;
            Object assignedValue;
            if (fieldDeclaration.isStatic() && fieldDeclaration.isFinal() && variable.getInitializer().isPresent()) {
                javaDocText = readFromProperties(CONSTANT_COMMENT);
                String typeText = SINGLE_STRING_FORMAT;
                if (!type.isPrimitiveType()) {
                    typeText = readFromProperties(LINK_COMMENT);
                }
                if (type.isPrimitiveType() || STRING.equals(type.asString())) {
                    valueText = readFromProperties(FIELD_VALUE_COMMENT);
                    assignedValue = fieldName;
                } else {
                    assignedValue = StringUtils.EMPTY;
                    Optional<Expression> initializer = variable.getInitializer();
                    if (initializer.isPresent()) {
                        assignedValue = initializer.get().toString();
                    }
                    valueText = SINGLE_STRING_FORMAT;
                }
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName, String.format(typeText, type.asString()), String.format(valueText, assignedValue)));
            } else {
                javaDocText = readFromProperties(FIELD_COMMENT);
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName));
            }
            javadocDescription.addElement(javadocSnippet);
            fieldDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateMethodJavaDoc(MethodDeclaration methodDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        JavadocSnippet element;
        String methodName = methodDeclaration.getName().asString();
        boolean isSetter = methodName.startsWith("set");
        boolean isGetter = methodName.startsWith("get");
        boolean isIs = methodName.startsWith("is");
        NodeList<Parameter> parameters = methodDeclaration.getParameters();
        String paramFormat = "%s {@link %s}";
        JavadocSnippet inheritDocSnippet = new JavadocSnippet(readFromProperties(INHERIT_DOC));
        String methodReturnType = methodDeclaration.getType().asString();
        if (!methodDeclaration.hasJavaDocComment()) {
            if (methodDeclaration.isAnnotationPresent(Override.class)) {
                javadocDescription.addElement(inheritDocSnippet);
                methodDeclaration.setJavadocComment(javadoc);
            } else {
                if (isSetter || isGetter || isIs) {
                    element = new JavadocSnippet("");
                } else if (Utils.isCamelCase(methodName)) {
                    element = new JavadocSnippet(StringUtils.capitalize(StringUtils.lowerCase(Utils.unCamelCase(methodName, " "))));
                } else {
                    element = new JavadocSnippet(readFromProperties(TODO_METHOD_TEXT));
                }
                javadocDescription.addElement(element);
                for (Parameter parameter : parameters) {
                    JavadocBlockTag blockTag;
                    if (parameter.getType().isPrimitiveType()) {
                        paramFormat = "%s %s ";
                    }
                    String paramName = parameter.getName().asString();
                    if (isSetter) {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), paramName, Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, paramName, parameter.getType().asString()));
                    }
                    javadoc.addBlockTag(blockTag);
                }
                if (!methodDeclaration.getType().isVoidType()) {
                    JavadocBlockTag javadocBlockTag;
                    if (isGetter) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else if (isIs) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2))));
                    } else {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType);
                    }
                    javadoc.addBlockTag(javadocBlockTag);
                }
                addExceptionsToJavaDoc(methodDeclaration.getThrownExceptions(), javadoc);
                methodDeclaration.setJavadocComment(javadoc);
            }
        } else if (methodDeclaration.isAnnotationPresent(Override.class)) {
            methodDeclaration.removeJavaDocComment();
            // if the method has an old javadoc, replace it by this one :
            javadocDescription.addElement(inheritDocSnippet);
            methodDeclaration.setJavadocComment(javadoc);
        } else {
            Javadoc oldJavaDoc = javadoc;
            if (methodDeclaration.getJavadoc().isPresent()) {
                oldJavaDoc = methodDeclaration.getJavadoc().get();
            }
            oldJavaDoc.getBlockTags().clear();
            for (Parameter parameter : parameters) {
                if (parameter.getType().isPrimitiveType()) {
                    paramFormat = "%s %s ";
                }
                if (isSetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else {
                    JavadocBlockTag blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    oldJavaDoc.addBlockTag(blockTag);
                }
            }
            if (!methodDeclaration.getType().isVoidType()) {
                if (isGetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else if (isIs) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2)))));
                } else
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType));
            }
            methodDeclaration.setJavadocComment(oldJavaDoc);
        }
    }

    public String getPropertiesPath() {
        return propertiesPath;
    }

    public void setPropertiesPath(String propertiesPath) {
        this.propertiesPath = propertiesPath;
    }
}

02:58:55.305 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_CLASS_TEXT
02:58:55.307 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
02:58:55.307 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
02:58:55.311 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
02:58:55.313 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:58:55.314 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:58:55.314 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
02:58:55.316 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.323 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.324 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.325 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:58:55.325 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.326 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:58:55.327 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.327 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:58:55.328 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.328 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:58:55.329 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.329 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.330 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:58:55.330 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.331 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:58:55.331 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.332 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:58:55.332 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.333 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
02:58:55.333 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.334 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.335 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.335 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.336 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.337 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.337 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.338 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
02:58:55.338 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
02:58:55.338 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
02:58:55.338 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
03:00:00.249 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
03:00:01.754 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
03:00:01.796 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.javacodegenerator.service;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.comments.LineComment;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.javadoc.Javadoc;
import com.github.javaparser.javadoc.JavadocBlockTag;
import com.github.javaparser.javadoc.description.JavadocDescription;
import com.github.javaparser.javadoc.description.JavadocSnippet;
import musta.belmo.javacodecore.logger.Level;
import musta.belmo.javacodecore.logger.MustaLogger;
import musta.belmo.javacodegenerator.FormattedJavadocBlockTag;
import musta.belmo.javacodecore.Utils;
import musta.belmo.javacodecore.ZipUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Optional;
import java.util.Properties;

public class JavaDocGenerator implements GeneratorConstantes {

    private String propertiesPath;

    private Properties properties;

    private final MustaLogger logger;

    public JavaDocGenerator() {
        logger = new MustaLogger(getClass());
        loadProperties(null);
    }

    private String readFromProperties(String key) {
        logger.logCurrentMethod(Level.DEBUG, key);
        return properties.getProperty(key);
    }

    public void loadProperties(String propertiesPath) {
        logger.logCurrentMethod(Level.DEBUG, propertiesPath);
        URL resource = null;
        if (propertiesPath == null) {
            resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
        } else {
            File file = new File(propertiesPath);
            try {
                resource = file.toURI().toURL();
            } catch (MalformedURLException e) {
                logger.error(propertiesPath, e);
            }
            if (resource == null) {
                resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
            }
        }
        if (resource != null) {
            properties = new Properties();
            try {
                InputStream resourceAsStream = resource.openStream();
                properties.load(resourceAsStream);
            } catch (IOException e) {
                logger.error("readFromProperties", e);
            }
        }
        this.propertiesPath = propertiesPath;
    }

    public void generateJavaDocForAllClasses(File directory, File dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.logCurrentMethod(Level.DEBUG, directory, dest);
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File destinationZip = new File(dest.getAbsolutePath());
        boolean isDirectory = directory.isDirectory();
        if (isDirectory) {
            Collection<File> files = FileUtils.listFiles(directory, new String[] { JAVA_EXTENSION }, true);
            for (File file : files) {
                generateJavaDoc(file.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
            }
        } else {
            generateJavaDoc(directory.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
        }
        if (toZip) {
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(".zip")));
            logger.info("file add to zip file {}", destinationZip.getAbsolutePath());
        }
        logger.info("generateJavaDocForAllClasses : done");
    }

    public void generateJavaDocForAllClasses(String directory, String dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File dir = new File(directory);
        File destinationZip = new File(dest);
        generateJavaDocForAllClasses(dir, destinationZip, toZip, deleteOldJavadoc);
        logger.info("generateJavaDocForAllClasses : done");
    }

    private void deleteJavaDocForAllClasses(String directory, String dest, boolean toZip) throws Exception {
        File dir = new File(directory);
        if (dir.isDirectory()) {
            Collection<File> files = FileUtils.listFiles(dir, new String[] { JAVA_EXTENSION }, toZip);
            for (File file : files) {
                deleteJavaDoc(file.getAbsolutePath(), dest);
            }
        } else {
            deleteJavaDoc(dir.getAbsolutePath(), dest);
        }
        if (toZip) {
            File destinationZip = new File(dest);
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(ZIP_EXTENSION)));
        }
    }

    public void generateJavaDoc(String srcPath, String destinationFile, boolean deleteOldJavaDoc) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        String javaDocAsString = generateJavaDocAsString(compilationUnit.toString(), deleteOldJavaDoc);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        FileUtils.write(destFile, javaDocAsString, UTF_8);
        logger.info("generated javadoc for  file {}", srcPath);
    }

    @SuppressWarnings("unchecked")
    private void generateJavaDocForTypeDeclaration(TypeDeclaration enumDeclaration) {
        if (!enumDeclaration.hasJavaDocComment()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String text = readFromProperties(TODO_CLASS_TEXT);
            if (enumDeclaration.isEnumDeclaration()) {
                text = readFromProperties(TODO_ENUM_TEXT);
            }
            JavadocSnippet element = new JavadocSnippet(text);
            javadocDescription.addElement(element);
            String author = readFromProperties(AUTHOR);
            String since = readFromProperties(SINCE_VERSION);
            if (author != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, author));
            if (since != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, since));
            enumDeclaration.setJavadocComment(javadoc);
        } else {
            Optional<Javadoc> optionalJavaDoc = enumDeclaration.getJavadoc();
            optionalJavaDoc.ifPresent(javadoc -> {
                javadoc.getBlockTags().removeIf(blockTag -> JavadocBlockTag.Type.SINCE.equals(blockTag.getType()));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, readFromProperties(SINCE_VERSION)));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, readFromProperties(AUTHOR)));
                enumDeclaration.setJavadocComment(javadoc);
            });
        }
    }

    public String generateJavaDocAsString(String src, boolean deleteOldJavaDoc) throws IOException {
        return generateJavaDocAsString(JavaParser.parse(src), deleteOldJavaDoc);
    }

    public String generateJavaDocAsString(CompilationUnit compilationUnit, boolean deleteOldJavaDoc) throws IOException {
        if (deleteOldJavaDoc) {
            deleteOldJavaDoc(compilationUnit);
            logger.info("deleted javadoc for  source code {}", compilationUnit.toString());
        }
        compilationUnit.findAll(TypeDeclaration.class).forEach(this::generateJavaDocForTypeDeclaration);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(this::generateConstructorJavaDoc);
        compilationUnit.findAll(FieldDeclaration.class).forEach(this::generateFieldJavaDoc);
        compilationUnit.findAll(MethodDeclaration.class).forEach(this::generateMethodJavaDoc);
        logger.info("generated javadoc for  source code");
        return compilationUnit.toString();
    }

    private File getDestination(String destinationFile, File srcFile, CompilationUnit compilationUnit) {
        return compilationUnit.getPackageDeclaration().map(packageDeclaration -> new File(destinationFile, Utils.convertPackageDeclarationToPath(packageDeclaration.getName().asString()) + File.separator + srcFile.getName())).orElseGet(() -> new File(destinationFile));
    }

    public void deleteJavaDoc(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        deleteOldJavaDoc(compilationUnit);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        logger.info("deleted javadoc for  file {}", srcPath);
    }

    private void deleteOldJavaDoc(CompilationUnit compilationUnit) {
        compilationUnit.findAll(TypeDeclaration.class).forEach(TypeDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(ConstructorDeclaration::removeJavaDocComment);
        compilationUnit.findAll(FieldDeclaration.class).forEach(FieldDeclaration::removeJavaDocComment);
        compilationUnit.findAll(MethodDeclaration.class).forEach(MethodDeclaration::removeJavaDocComment);
    }

    public String deleteJavaDoc(String src) {
        CompilationUnit compilationUnit = JavaParser.parse(src);
        deleteOldJavaDoc(compilationUnit);
        return compilationUnit.toString();
    }

    private void generateConstructorJavaDoc(ConstructorDeclaration constructorDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        NodeList<Parameter> constructParams = constructorDeclaration.getParameters();
        String leadingComment;
        if (constructParams.isEmpty() && (constructorDeclaration.getBody().getStatements().isEmpty())) {
            leadingComment = readFromProperties(DEFAULT_CONSTR_COMMENT);
            constructorDeclaration.getBody().addOrphanComment(new LineComment(leadingComment));
        } else {
            leadingComment = String.format(readFromProperties(CONSTR_COMMENT), constructorDeclaration.getName().asString());
        }
        JavadocSnippet element = new JavadocSnippet(leadingComment);
        javadocDescription.addElement(element);
        if (!constructorDeclaration.getJavadoc().isPresent()) {
            for (Parameter parameter : constructParams) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format("%s{@link %s}", parameter.getName().asString(), parameter.getType().asString()));
                javadoc.addBlockTag(javadocBlockTag);
            }
            NodeList<ReferenceType> thrownExceptions = constructorDeclaration.getThrownExceptions();
            addExceptionsToJavaDoc(thrownExceptions, javadoc);
            constructorDeclaration.setJavadocComment(javadoc);
        }
    }

    private void addExceptionsToJavaDoc(NodeList<ReferenceType> thrownExceptions, Javadoc javadoc) {
        for (ReferenceType thrownException : thrownExceptions) {
            FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, String.format(readFromProperties(EXCEPTION_COMMENT), thrownException.asReferenceType()));
            javadoc.addBlockTag(javadocBlockTag);
        }
    }

    private void generateFieldJavaDoc(FieldDeclaration fieldDeclaration) {
        if (fieldDeclaration.getVariables().isNonEmpty()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String javaDocText;
            JavadocSnippet javadocSnippet;
            VariableDeclarator variableDeclarator = fieldDeclaration.getVariables().get(0);
            SimpleName fieldName = variableDeclarator.getName();
            VariableDeclarator variable = fieldDeclaration.getVariable(0);
            Type type = variable.getType();
            String valueText;
            Object assignedValue;
            if (fieldDeclaration.isStatic() && fieldDeclaration.isFinal() && variable.getInitializer().isPresent()) {
                javaDocText = readFromProperties(CONSTANT_COMMENT);
                String typeText = SINGLE_STRING_FORMAT;
                if (!type.isPrimitiveType()) {
                    typeText = readFromProperties(LINK_COMMENT);
                }
                if (type.isPrimitiveType() || STRING.equals(type.asString())) {
                    valueText = readFromProperties(FIELD_VALUE_COMMENT);
                    assignedValue = fieldName;
                } else {
                    assignedValue = StringUtils.EMPTY;
                    Optional<Expression> initializer = variable.getInitializer();
                    if (initializer.isPresent()) {
                        assignedValue = initializer.get().toString();
                    }
                    valueText = SINGLE_STRING_FORMAT;
                }
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName, String.format(typeText, type.asString()), String.format(valueText, assignedValue)));
            } else {
                javaDocText = readFromProperties(FIELD_COMMENT);
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName));
            }
            javadocDescription.addElement(javadocSnippet);
            fieldDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateMethodJavaDoc(MethodDeclaration methodDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        JavadocSnippet element;
        String methodName = methodDeclaration.getName().asString();
        boolean isSetter = methodName.startsWith("set");
        boolean isGetter = methodName.startsWith("get");
        boolean isIs = methodName.startsWith("is");
        NodeList<Parameter> parameters = methodDeclaration.getParameters();
        String paramFormat = "%s {@link %s}";
        JavadocSnippet inheritDocSnippet = new JavadocSnippet(readFromProperties(INHERIT_DOC));
        String methodReturnType = methodDeclaration.getType().asString();
        if (!methodDeclaration.hasJavaDocComment()) {
            if (methodDeclaration.isAnnotationPresent(Override.class)) {
                javadocDescription.addElement(inheritDocSnippet);
                methodDeclaration.setJavadocComment(javadoc);
            } else {
                if (isSetter || isGetter || isIs) {
                    element = new JavadocSnippet("");
                } else if (Utils.isCamelCase(methodName)) {
                    element = new JavadocSnippet(StringUtils.capitalize(StringUtils.lowerCase(Utils.unCamelCase(methodName, " "))));
                } else {
                    element = new JavadocSnippet(readFromProperties(TODO_METHOD_TEXT));
                }
                javadocDescription.addElement(element);
                for (Parameter parameter : parameters) {
                    JavadocBlockTag blockTag;
                    if (parameter.getType().isPrimitiveType()) {
                        paramFormat = "%s %s ";
                    }
                    String paramName = parameter.getName().asString();
                    if (isSetter) {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), paramName, Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, paramName, parameter.getType().asString()));
                    }
                    javadoc.addBlockTag(blockTag);
                }
                if (!methodDeclaration.getType().isVoidType()) {
                    JavadocBlockTag javadocBlockTag;
                    if (isGetter) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else if (isIs) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2))));
                    } else {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType);
                    }
                    javadoc.addBlockTag(javadocBlockTag);
                }
                addExceptionsToJavaDoc(methodDeclaration.getThrownExceptions(), javadoc);
                methodDeclaration.setJavadocComment(javadoc);
            }
        } else if (methodDeclaration.isAnnotationPresent(Override.class)) {
            methodDeclaration.removeJavaDocComment();
            // if the method has an old javadoc, replace it by this one :
            javadocDescription.addElement(inheritDocSnippet);
            methodDeclaration.setJavadocComment(javadoc);
        } else {
            Javadoc oldJavaDoc = javadoc;
            if (methodDeclaration.getJavadoc().isPresent()) {
                oldJavaDoc = methodDeclaration.getJavadoc().get();
            }
            oldJavaDoc.getBlockTags().clear();
            for (Parameter parameter : parameters) {
                if (parameter.getType().isPrimitiveType()) {
                    paramFormat = "%s %s ";
                }
                if (isSetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else {
                    JavadocBlockTag blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    oldJavaDoc.addBlockTag(blockTag);
                }
            }
            if (!methodDeclaration.getType().isVoidType()) {
                if (isGetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else if (isIs) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2)))));
                } else
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType));
            }
            methodDeclaration.setJavadocComment(oldJavaDoc);
        }
    }

    public String getPropertiesPath() {
        return propertiesPath;
    }

    public void setPropertiesPath(String propertiesPath) {
        this.propertiesPath = propertiesPath;
    }
}

03:00:01.799 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_CLASS_TEXT
03:00:01.799 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
03:00:01.801 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
03:00:01.802 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
03:00:01.803 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:01.804 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:01.804 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:01.807 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.808 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.809 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.809 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:01.810 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.810 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:01.811 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.811 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:01.812 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.812 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:01.813 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.813 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.814 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:01.814 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.815 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:01.815 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.816 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
03:00:01.816 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.816 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:01.817 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.817 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.818 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.819 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.820 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.820 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.821 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.821 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
03:00:01.822 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:01.822 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
03:00:01.822 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
03:00:12.431 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
03:00:13.670 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
03:00:13.704 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.javacodegenerator.service;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.comments.LineComment;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.javadoc.Javadoc;
import com.github.javaparser.javadoc.JavadocBlockTag;
import com.github.javaparser.javadoc.description.JavadocDescription;
import com.github.javaparser.javadoc.description.JavadocSnippet;
import musta.belmo.javacodecore.logger.Level;
import musta.belmo.javacodecore.logger.MustaLogger;
import musta.belmo.javacodegenerator.FormattedJavadocBlockTag;
import musta.belmo.javacodecore.Utils;
import musta.belmo.javacodecore.ZipUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Optional;
import java.util.Properties;

public class JavaDocGenerator implements GeneratorConstantes {

    private String propertiesPath;

    private Properties properties;

    private final MustaLogger logger;

    public JavaDocGenerator() {
    }

    private String readFromProperties(String key) {
        logger.logCurrentMethod(Level.DEBUG, key);
        return properties.getProperty(key);
    }

    public void loadProperties(String propertiesPath) {
        logger.logCurrentMethod(Level.DEBUG, propertiesPath);
        URL resource = null;
        if (propertiesPath == null) {
            resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
        } else {
            File file = new File(propertiesPath);
            try {
                resource = file.toURI().toURL();
            } catch (MalformedURLException e) {
                logger.error(propertiesPath, e);
            }
            if (resource == null) {
                resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
            }
        }
        if (resource != null) {
            properties = new Properties();
            try {
                InputStream resourceAsStream = resource.openStream();
                properties.load(resourceAsStream);
            } catch (IOException e) {
                logger.error("readFromProperties", e);
            }
        }
        this.propertiesPath = propertiesPath;
    }

    public void generateJavaDocForAllClasses(File directory, File dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.logCurrentMethod(Level.DEBUG, directory, dest);
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File destinationZip = new File(dest.getAbsolutePath());
        boolean isDirectory = directory.isDirectory();
        if (isDirectory) {
            Collection<File> files = FileUtils.listFiles(directory, new String[] { JAVA_EXTENSION }, true);
            for (File file : files) {
                generateJavaDoc(file.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
            }
        } else {
            generateJavaDoc(directory.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
        }
        if (toZip) {
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(".zip")));
            logger.info("file add to zip file {}", destinationZip.getAbsolutePath());
        }
        logger.info("generateJavaDocForAllClasses : done");
    }

    public void generateJavaDocForAllClasses(String directory, String dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File dir = new File(directory);
        File destinationZip = new File(dest);
        generateJavaDocForAllClasses(dir, destinationZip, toZip, deleteOldJavadoc);
        logger.info("generateJavaDocForAllClasses : done");
    }

    private void deleteJavaDocForAllClasses(String directory, String dest, boolean toZip) throws Exception {
        File dir = new File(directory);
        if (dir.isDirectory()) {
            Collection<File> files = FileUtils.listFiles(dir, new String[] { JAVA_EXTENSION }, toZip);
            for (File file : files) {
                deleteJavaDoc(file.getAbsolutePath(), dest);
            }
        } else {
            deleteJavaDoc(dir.getAbsolutePath(), dest);
        }
        if (toZip) {
            File destinationZip = new File(dest);
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(ZIP_EXTENSION)));
        }
    }

    public void generateJavaDoc(String srcPath, String destinationFile, boolean deleteOldJavaDoc) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        String javaDocAsString = generateJavaDocAsString(compilationUnit.toString(), deleteOldJavaDoc);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        FileUtils.write(destFile, javaDocAsString, UTF_8);
        logger.info("generated javadoc for  file {}", srcPath);
    }

    @SuppressWarnings("unchecked")
    private void generateJavaDocForTypeDeclaration(TypeDeclaration enumDeclaration) {
        if (!enumDeclaration.hasJavaDocComment()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String text = readFromProperties(TODO_CLASS_TEXT);
            if (enumDeclaration.isEnumDeclaration()) {
                text = readFromProperties(TODO_ENUM_TEXT);
            }
            JavadocSnippet element = new JavadocSnippet(text);
            javadocDescription.addElement(element);
            String author = readFromProperties(AUTHOR);
            String since = readFromProperties(SINCE_VERSION);
            if (author != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, author));
            if (since != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, since));
            enumDeclaration.setJavadocComment(javadoc);
        } else {
            Optional<Javadoc> optionalJavaDoc = enumDeclaration.getJavadoc();
            optionalJavaDoc.ifPresent(javadoc -> {
                javadoc.getBlockTags().removeIf(blockTag -> JavadocBlockTag.Type.SINCE.equals(blockTag.getType()));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, readFromProperties(SINCE_VERSION)));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, readFromProperties(AUTHOR)));
                enumDeclaration.setJavadocComment(javadoc);
            });
        }
    }

    public String generateJavaDocAsString(String src, boolean deleteOldJavaDoc) throws IOException {
        return generateJavaDocAsString(JavaParser.parse(src), deleteOldJavaDoc);
    }

    public String generateJavaDocAsString(CompilationUnit compilationUnit, boolean deleteOldJavaDoc) throws IOException {
        if (deleteOldJavaDoc) {
            deleteOldJavaDoc(compilationUnit);
            logger.info("deleted javadoc for  source code {}", compilationUnit.toString());
        }
        compilationUnit.findAll(TypeDeclaration.class).forEach(this::generateJavaDocForTypeDeclaration);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(this::generateConstructorJavaDoc);
        compilationUnit.findAll(FieldDeclaration.class).forEach(this::generateFieldJavaDoc);
        compilationUnit.findAll(MethodDeclaration.class).forEach(this::generateMethodJavaDoc);
        logger.info("generated javadoc for  source code");
        return compilationUnit.toString();
    }

    private File getDestination(String destinationFile, File srcFile, CompilationUnit compilationUnit) {
        return compilationUnit.getPackageDeclaration().map(packageDeclaration -> new File(destinationFile, Utils.convertPackageDeclarationToPath(packageDeclaration.getName().asString()) + File.separator + srcFile.getName())).orElseGet(() -> new File(destinationFile));
    }

    public void deleteJavaDoc(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        deleteOldJavaDoc(compilationUnit);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        logger.info("deleted javadoc for  file {}", srcPath);
    }

    private void deleteOldJavaDoc(CompilationUnit compilationUnit) {
        compilationUnit.findAll(TypeDeclaration.class).forEach(TypeDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(ConstructorDeclaration::removeJavaDocComment);
        compilationUnit.findAll(FieldDeclaration.class).forEach(FieldDeclaration::removeJavaDocComment);
        compilationUnit.findAll(MethodDeclaration.class).forEach(MethodDeclaration::removeJavaDocComment);
    }

    public String deleteJavaDoc(String src) {
        CompilationUnit compilationUnit = JavaParser.parse(src);
        deleteOldJavaDoc(compilationUnit);
        return compilationUnit.toString();
    }

    private void generateConstructorJavaDoc(ConstructorDeclaration constructorDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        NodeList<Parameter> constructParams = constructorDeclaration.getParameters();
        String leadingComment;
        if (constructParams.isEmpty() && (constructorDeclaration.getBody().getStatements().isEmpty())) {
            leadingComment = readFromProperties(DEFAULT_CONSTR_COMMENT);
            constructorDeclaration.getBody().addOrphanComment(new LineComment(leadingComment));
        } else {
            leadingComment = String.format(readFromProperties(CONSTR_COMMENT), constructorDeclaration.getName().asString());
        }
        JavadocSnippet element = new JavadocSnippet(leadingComment);
        javadocDescription.addElement(element);
        if (!constructorDeclaration.getJavadoc().isPresent()) {
            for (Parameter parameter : constructParams) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format("%s{@link %s}", parameter.getName().asString(), parameter.getType().asString()));
                javadoc.addBlockTag(javadocBlockTag);
            }
            NodeList<ReferenceType> thrownExceptions = constructorDeclaration.getThrownExceptions();
            addExceptionsToJavaDoc(thrownExceptions, javadoc);
            constructorDeclaration.setJavadocComment(javadoc);
        }
    }

    private void addExceptionsToJavaDoc(NodeList<ReferenceType> thrownExceptions, Javadoc javadoc) {
        for (ReferenceType thrownException : thrownExceptions) {
            FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, String.format(readFromProperties(EXCEPTION_COMMENT), thrownException.asReferenceType()));
            javadoc.addBlockTag(javadocBlockTag);
        }
    }

    private void generateFieldJavaDoc(FieldDeclaration fieldDeclaration) {
        if (fieldDeclaration.getVariables().isNonEmpty()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String javaDocText;
            JavadocSnippet javadocSnippet;
            VariableDeclarator variableDeclarator = fieldDeclaration.getVariables().get(0);
            SimpleName fieldName = variableDeclarator.getName();
            VariableDeclarator variable = fieldDeclaration.getVariable(0);
            Type type = variable.getType();
            String valueText;
            Object assignedValue;
            if (fieldDeclaration.isStatic() && fieldDeclaration.isFinal() && variable.getInitializer().isPresent()) {
                javaDocText = readFromProperties(CONSTANT_COMMENT);
                String typeText = SINGLE_STRING_FORMAT;
                if (!type.isPrimitiveType()) {
                    typeText = readFromProperties(LINK_COMMENT);
                }
                if (type.isPrimitiveType() || STRING.equals(type.asString())) {
                    valueText = readFromProperties(FIELD_VALUE_COMMENT);
                    assignedValue = fieldName;
                } else {
                    assignedValue = StringUtils.EMPTY;
                    Optional<Expression> initializer = variable.getInitializer();
                    if (initializer.isPresent()) {
                        assignedValue = initializer.get().toString();
                    }
                    valueText = SINGLE_STRING_FORMAT;
                }
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName, String.format(typeText, type.asString()), String.format(valueText, assignedValue)));
            } else {
                javaDocText = readFromProperties(FIELD_COMMENT);
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName));
            }
            javadocDescription.addElement(javadocSnippet);
            fieldDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateMethodJavaDoc(MethodDeclaration methodDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        JavadocSnippet element;
        String methodName = methodDeclaration.getName().asString();
        boolean isSetter = methodName.startsWith("set");
        boolean isGetter = methodName.startsWith("get");
        boolean isIs = methodName.startsWith("is");
        NodeList<Parameter> parameters = methodDeclaration.getParameters();
        String paramFormat = "%s {@link %s}";
        JavadocSnippet inheritDocSnippet = new JavadocSnippet(readFromProperties(INHERIT_DOC));
        String methodReturnType = methodDeclaration.getType().asString();
        if (!methodDeclaration.hasJavaDocComment()) {
            if (methodDeclaration.isAnnotationPresent(Override.class)) {
                javadocDescription.addElement(inheritDocSnippet);
                methodDeclaration.setJavadocComment(javadoc);
            } else {
                if (isSetter || isGetter || isIs) {
                    element = new JavadocSnippet("");
                } else if (Utils.isCamelCase(methodName)) {
                    element = new JavadocSnippet(StringUtils.capitalize(StringUtils.lowerCase(Utils.unCamelCase(methodName, " "))));
                } else {
                    element = new JavadocSnippet(readFromProperties(TODO_METHOD_TEXT));
                }
                javadocDescription.addElement(element);
                for (Parameter parameter : parameters) {
                    JavadocBlockTag blockTag;
                    if (parameter.getType().isPrimitiveType()) {
                        paramFormat = "%s %s ";
                    }
                    String paramName = parameter.getName().asString();
                    if (isSetter) {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), paramName, Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, paramName, parameter.getType().asString()));
                    }
                    javadoc.addBlockTag(blockTag);
                }
                if (!methodDeclaration.getType().isVoidType()) {
                    JavadocBlockTag javadocBlockTag;
                    if (isGetter) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else if (isIs) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2))));
                    } else {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType);
                    }
                    javadoc.addBlockTag(javadocBlockTag);
                }
                addExceptionsToJavaDoc(methodDeclaration.getThrownExceptions(), javadoc);
                methodDeclaration.setJavadocComment(javadoc);
            }
        } else if (methodDeclaration.isAnnotationPresent(Override.class)) {
            methodDeclaration.removeJavaDocComment();
            // if the method has an old javadoc, replace it by this one :
            javadocDescription.addElement(inheritDocSnippet);
            methodDeclaration.setJavadocComment(javadoc);
        } else {
            Javadoc oldJavaDoc = javadoc;
            if (methodDeclaration.getJavadoc().isPresent()) {
                oldJavaDoc = methodDeclaration.getJavadoc().get();
            }
            oldJavaDoc.getBlockTags().clear();
            for (Parameter parameter : parameters) {
                if (parameter.getType().isPrimitiveType()) {
                    paramFormat = "%s %s ";
                }
                if (isSetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else {
                    JavadocBlockTag blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    oldJavaDoc.addBlockTag(blockTag);
                }
            }
            if (!methodDeclaration.getType().isVoidType()) {
                if (isGetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else if (isIs) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2)))));
                } else
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType));
            }
            methodDeclaration.setJavadocComment(oldJavaDoc);
        }
    }

    public String getPropertiesPath() {
        return propertiesPath;
    }

    public void setPropertiesPath(String propertiesPath) {
        this.propertiesPath = propertiesPath;
    }
}

03:00:13.710 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_CLASS_TEXT
03:00:13.710 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
03:00:13.711 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
03:00:13.712 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values DEFAULT_CONSTR_COMMENT
03:00:13.713 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:13.714 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:13.714 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:13.715 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.716 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.716 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.717 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:13.717 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.718 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:13.718 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.718 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:13.719 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.719 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:13.719 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.720 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.720 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:13.720 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.721 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:13.721 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.721 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
03:00:13.722 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.722 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:13.722 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.723 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.723 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.723 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.724 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.724 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.725 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.725 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
03:00:13.725 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:13.725 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
03:00:13.725 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
03:00:32.303 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
03:00:33.697 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : loadProperties with values null
03:00:33.723 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - deleted javadoc for  source code package musta.belmo.javacodegenerator.service;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.comments.LineComment;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.javadoc.Javadoc;
import com.github.javaparser.javadoc.JavadocBlockTag;
import com.github.javaparser.javadoc.description.JavadocDescription;
import com.github.javaparser.javadoc.description.JavadocSnippet;
import musta.belmo.javacodecore.logger.Level;
import musta.belmo.javacodecore.logger.MustaLogger;
import musta.belmo.javacodegenerator.FormattedJavadocBlockTag;
import musta.belmo.javacodecore.Utils;
import musta.belmo.javacodecore.ZipUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.EnumSet;
import java.util.Optional;
import java.util.Properties;

public class JavaDocGenerator implements GeneratorConstantes {

    private String propertiesPath;

    private Properties properties;

    private final MustaLogger logger;

    public JavaDocGenerator() {
        sus.out();
    }

    private String readFromProperties(String key) {
        logger.logCurrentMethod(Level.DEBUG, key);
        return properties.getProperty(key);
    }

    public void loadProperties(String propertiesPath) {
        logger.logCurrentMethod(Level.DEBUG, propertiesPath);
        URL resource = null;
        if (propertiesPath == null) {
            resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
        } else {
            File file = new File(propertiesPath);
            try {
                resource = file.toURI().toURL();
            } catch (MalformedURLException e) {
                logger.error(propertiesPath, e);
            }
            if (resource == null) {
                resource = JavaDocGenerator.class.getClassLoader().getResource(APPLICATION_PROPERTIES);
            }
        }
        if (resource != null) {
            properties = new Properties();
            try {
                InputStream resourceAsStream = resource.openStream();
                properties.load(resourceAsStream);
            } catch (IOException e) {
                logger.error("readFromProperties", e);
            }
        }
        this.propertiesPath = propertiesPath;
    }

    public void generateJavaDocForAllClasses(File directory, File dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.logCurrentMethod(Level.DEBUG, directory, dest);
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File destinationZip = new File(dest.getAbsolutePath());
        boolean isDirectory = directory.isDirectory();
        if (isDirectory) {
            Collection<File> files = FileUtils.listFiles(directory, new String[] { JAVA_EXTENSION }, true);
            for (File file : files) {
                generateJavaDoc(file.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
            }
        } else {
            generateJavaDoc(directory.getAbsolutePath(), dest.getAbsolutePath(), deleteOldJavadoc);
        }
        if (toZip) {
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(".zip")));
            logger.info("file add to zip file {}", destinationZip.getAbsolutePath());
        }
        logger.info("generateJavaDocForAllClasses : done");
    }

    public void generateJavaDocForAllClasses(String directory, String dest, boolean toZip, boolean deleteOldJavadoc) throws IOException {
        logger.info("generateJavaDocForAllClasses : directory {}\n destination {}", directory, dest);
        File dir = new File(directory);
        File destinationZip = new File(dest);
        generateJavaDocForAllClasses(dir, destinationZip, toZip, deleteOldJavadoc);
        logger.info("generateJavaDocForAllClasses : done");
    }

    private void deleteJavaDocForAllClasses(String directory, String dest, boolean toZip) throws Exception {
        File dir = new File(directory);
        if (dir.isDirectory()) {
            Collection<File> files = FileUtils.listFiles(dir, new String[] { JAVA_EXTENSION }, toZip);
            for (File file : files) {
                deleteJavaDoc(file.getAbsolutePath(), dest);
            }
        } else {
            deleteJavaDoc(dir.getAbsolutePath(), dest);
        }
        if (toZip) {
            File destinationZip = new File(dest);
            ZipUtils.zip(destinationZip, new File(destinationZip.getParent(), destinationZip.getName().concat(ZIP_EXTENSION)));
        }
    }

    public void generateJavaDoc(String srcPath, String destinationFile, boolean deleteOldJavaDoc) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        String javaDocAsString = generateJavaDocAsString(compilationUnit.toString(), deleteOldJavaDoc);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        FileUtils.write(destFile, javaDocAsString, UTF_8);
        logger.info("generated javadoc for  file {}", srcPath);
    }

    @SuppressWarnings("unchecked")
    private void generateJavaDocForTypeDeclaration(TypeDeclaration enumDeclaration) {
        if (!enumDeclaration.hasJavaDocComment()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String text = readFromProperties(TODO_CLASS_TEXT);
            if (enumDeclaration.isEnumDeclaration()) {
                text = readFromProperties(TODO_ENUM_TEXT);
            }
            JavadocSnippet element = new JavadocSnippet(text);
            javadocDescription.addElement(element);
            String author = readFromProperties(AUTHOR);
            String since = readFromProperties(SINCE_VERSION);
            if (author != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, author));
            if (since != null)
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, since));
            enumDeclaration.setJavadocComment(javadoc);
        } else {
            Optional<Javadoc> optionalJavaDoc = enumDeclaration.getJavadoc();
            optionalJavaDoc.ifPresent(javadoc -> {
                javadoc.getBlockTags().removeIf(blockTag -> JavadocBlockTag.Type.SINCE.equals(blockTag.getType()));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.SINCE, readFromProperties(SINCE_VERSION)));
                javadoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.AUTHOR, readFromProperties(AUTHOR)));
                enumDeclaration.setJavadocComment(javadoc);
            });
        }
    }

    public String generateJavaDocAsString(String src, boolean deleteOldJavaDoc) throws IOException {
        return generateJavaDocAsString(JavaParser.parse(src), deleteOldJavaDoc);
    }

    public String generateJavaDocAsString(CompilationUnit compilationUnit, boolean deleteOldJavaDoc) throws IOException {
        if (deleteOldJavaDoc) {
            deleteOldJavaDoc(compilationUnit);
            logger.info("deleted javadoc for  source code {}", compilationUnit.toString());
        }
        compilationUnit.findAll(TypeDeclaration.class).forEach(this::generateJavaDocForTypeDeclaration);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(this::generateConstructorJavaDoc);
        compilationUnit.findAll(FieldDeclaration.class).forEach(this::generateFieldJavaDoc);
        compilationUnit.findAll(MethodDeclaration.class).forEach(this::generateMethodJavaDoc);
        logger.info("generated javadoc for  source code");
        return compilationUnit.toString();
    }

    private File getDestination(String destinationFile, File srcFile, CompilationUnit compilationUnit) {
        return compilationUnit.getPackageDeclaration().map(packageDeclaration -> new File(destinationFile, Utils.convertPackageDeclarationToPath(packageDeclaration.getName().asString()) + File.separator + srcFile.getName())).orElseGet(() -> new File(destinationFile));
    }

    public void deleteJavaDoc(String srcPath, String destinationFile) throws IOException {
        File srcFile = new File(srcPath);
        CompilationUnit compilationUnit = JavaParser.parse(srcFile);
        File destFile = getDestination(destinationFile, srcFile, compilationUnit);
        deleteOldJavaDoc(compilationUnit);
        FileUtils.write(destFile, compilationUnit.toString(), UTF_8);
        logger.info("deleted javadoc for  file {}", srcPath);
    }

    private void deleteOldJavaDoc(CompilationUnit compilationUnit) {
        compilationUnit.findAll(TypeDeclaration.class).forEach(TypeDeclaration::removeJavaDocComment);
        compilationUnit.findAll(ConstructorDeclaration.class).forEach(ConstructorDeclaration::removeJavaDocComment);
        compilationUnit.findAll(FieldDeclaration.class).forEach(FieldDeclaration::removeJavaDocComment);
        compilationUnit.findAll(MethodDeclaration.class).forEach(MethodDeclaration::removeJavaDocComment);
    }

    public String deleteJavaDoc(String src) {
        CompilationUnit compilationUnit = JavaParser.parse(src);
        deleteOldJavaDoc(compilationUnit);
        return compilationUnit.toString();
    }

    private void generateConstructorJavaDoc(ConstructorDeclaration constructorDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        NodeList<Parameter> constructParams = constructorDeclaration.getParameters();
        String leadingComment;
        if (constructParams.isEmpty() && (constructorDeclaration.getBody().getStatements().isEmpty())) {
            leadingComment = readFromProperties(DEFAULT_CONSTR_COMMENT);
            constructorDeclaration.getBody().addOrphanComment(new LineComment(leadingComment));
        } else {
            leadingComment = String.format(readFromProperties(CONSTR_COMMENT), constructorDeclaration.getName().asString());
        }
        JavadocSnippet element = new JavadocSnippet(leadingComment);
        javadocDescription.addElement(element);
        if (!constructorDeclaration.getJavadoc().isPresent()) {
            for (Parameter parameter : constructParams) {
                FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format("%s{@link %s}", parameter.getName().asString(), parameter.getType().asString()));
                javadoc.addBlockTag(javadocBlockTag);
            }
            NodeList<ReferenceType> thrownExceptions = constructorDeclaration.getThrownExceptions();
            addExceptionsToJavaDoc(thrownExceptions, javadoc);
            constructorDeclaration.setJavadocComment(javadoc);
        }
    }

    private void addExceptionsToJavaDoc(NodeList<ReferenceType> thrownExceptions, Javadoc javadoc) {
        for (ReferenceType thrownException : thrownExceptions) {
            FormattedJavadocBlockTag javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.THROWS, String.format(readFromProperties(EXCEPTION_COMMENT), thrownException.asReferenceType()));
            javadoc.addBlockTag(javadocBlockTag);
        }
    }

    private void generateFieldJavaDoc(FieldDeclaration fieldDeclaration) {
        if (fieldDeclaration.getVariables().isNonEmpty()) {
            JavadocDescription javadocDescription = new JavadocDescription();
            Javadoc javadoc = new Javadoc(javadocDescription);
            String javaDocText;
            JavadocSnippet javadocSnippet;
            VariableDeclarator variableDeclarator = fieldDeclaration.getVariables().get(0);
            SimpleName fieldName = variableDeclarator.getName();
            VariableDeclarator variable = fieldDeclaration.getVariable(0);
            Type type = variable.getType();
            String valueText;
            Object assignedValue;
            if (fieldDeclaration.isStatic() && fieldDeclaration.isFinal() && variable.getInitializer().isPresent()) {
                javaDocText = readFromProperties(CONSTANT_COMMENT);
                String typeText = SINGLE_STRING_FORMAT;
                if (!type.isPrimitiveType()) {
                    typeText = readFromProperties(LINK_COMMENT);
                }
                if (type.isPrimitiveType() || STRING.equals(type.asString())) {
                    valueText = readFromProperties(FIELD_VALUE_COMMENT);
                    assignedValue = fieldName;
                } else {
                    assignedValue = StringUtils.EMPTY;
                    Optional<Expression> initializer = variable.getInitializer();
                    if (initializer.isPresent()) {
                        assignedValue = initializer.get().toString();
                    }
                    valueText = SINGLE_STRING_FORMAT;
                }
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName, String.format(typeText, type.asString()), String.format(valueText, assignedValue)));
            } else {
                javaDocText = readFromProperties(FIELD_COMMENT);
                javadocSnippet = new JavadocSnippet(String.format(javaDocText, fieldName));
            }
            javadocDescription.addElement(javadocSnippet);
            fieldDeclaration.setJavadocComment(javadoc);
        }
    }

    private void generateMethodJavaDoc(MethodDeclaration methodDeclaration) {
        JavadocDescription javadocDescription = new JavadocDescription();
        Javadoc javadoc = new Javadoc(javadocDescription);
        JavadocSnippet element;
        String methodName = methodDeclaration.getName().asString();
        boolean isSetter = methodName.startsWith("set");
        boolean isGetter = methodName.startsWith("get");
        boolean isIs = methodName.startsWith("is");
        NodeList<Parameter> parameters = methodDeclaration.getParameters();
        String paramFormat = "%s {@link %s}";
        JavadocSnippet inheritDocSnippet = new JavadocSnippet(readFromProperties(INHERIT_DOC));
        String methodReturnType = methodDeclaration.getType().asString();
        if (!methodDeclaration.hasJavaDocComment()) {
            if (methodDeclaration.isAnnotationPresent(Override.class)) {
                javadocDescription.addElement(inheritDocSnippet);
                methodDeclaration.setJavadocComment(javadoc);
            } else {
                if (isSetter || isGetter || isIs) {
                    element = new JavadocSnippet("");
                } else if (Utils.isCamelCase(methodName)) {
                    element = new JavadocSnippet(StringUtils.capitalize(StringUtils.lowerCase(Utils.unCamelCase(methodName, " "))));
                } else {
                    element = new JavadocSnippet(readFromProperties(TODO_METHOD_TEXT));
                }
                javadocDescription.addElement(element);
                for (Parameter parameter : parameters) {
                    JavadocBlockTag blockTag;
                    if (parameter.getType().isPrimitiveType()) {
                        paramFormat = "%s %s ";
                    }
                    String paramName = parameter.getName().asString();
                    if (isSetter) {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), paramName, Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else {
                        blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, paramName, parameter.getType().asString()));
                    }
                    javadoc.addBlockTag(blockTag);
                }
                if (!methodDeclaration.getType().isVoidType()) {
                    JavadocBlockTag javadocBlockTag;
                    if (isGetter) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3))));
                    } else if (isIs) {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2))));
                    } else {
                        javadocBlockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType);
                    }
                    javadoc.addBlockTag(javadocBlockTag);
                }
                addExceptionsToJavaDoc(methodDeclaration.getThrownExceptions(), javadoc);
                methodDeclaration.setJavadocComment(javadoc);
            }
        } else if (methodDeclaration.isAnnotationPresent(Override.class)) {
            methodDeclaration.removeJavaDocComment();
            // if the method has an old javadoc, replace it by this one :
            javadocDescription.addElement(inheritDocSnippet);
            methodDeclaration.setJavadocComment(javadoc);
        } else {
            Javadoc oldJavaDoc = javadoc;
            if (methodDeclaration.getJavadoc().isPresent()) {
                oldJavaDoc = methodDeclaration.getJavadoc().get();
            }
            oldJavaDoc.getBlockTags().clear();
            for (Parameter parameter : parameters) {
                if (parameter.getType().isPrimitiveType()) {
                    paramFormat = "%s %s ";
                }
                if (isSetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(readFromProperties(SETTER_COMMENT), parameter.getName().asString(), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else {
                    JavadocBlockTag blockTag = new FormattedJavadocBlockTag(JavadocBlockTag.Type.PARAM, String.format(paramFormat, parameter.getName().asString(), parameter.getType().asString()));
                    oldJavaDoc.addBlockTag(blockTag);
                }
            }
            if (!methodDeclaration.getType().isVoidType()) {
                if (isGetter) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(3)))));
                } else if (isIs) {
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, String.format(readFromProperties(ATTRIBUT_COMMENT_FORMAT), Utils.toLowerCaseFirstLetter(methodName.substring(2)))));
                } else
                    oldJavaDoc.addBlockTag(new FormattedJavadocBlockTag(JavadocBlockTag.Type.RETURN, methodReturnType));
            }
            methodDeclaration.setJavadocComment(oldJavaDoc);
        }
    }

    public String getPropertiesPath() {
        return propertiesPath;
    }

    public void setPropertiesPath(String propertiesPath) {
        this.propertiesPath = propertiesPath;
    }
}

03:00:33.725 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values TODO_CLASS_TEXT
03:00:33.725 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values AUTHOR
03:00:33.725 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SINCE_VERSION
03:00:33.726 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values CONSTR_COMMENT
03:00:33.727 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:33.728 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:33.728 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values FIELD_COMMENT
03:00:33.728 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.729 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.729 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.729 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:33.730 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.730 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:33.730 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.731 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:33.731 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.731 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:33.732 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.732 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.732 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:33.732 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.733 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:33.733 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.733 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
03:00:33.734 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.734 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values EXCEPTION_COMMENT
03:00:33.735 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.735 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.735 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.736 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.736 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.737 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.737 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.737 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values ATTRIBUT_COMMENT_FORMAT
03:00:33.738 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values INHERIT_DOC
03:00:33.738 [JavaFX Application Thread] DEBUG m.b.j.service.JavaDocGenerator - Method : readFromProperties with values SETTER_COMMENT
03:00:33.738 [JavaFX Application Thread] INFO  m.b.j.service.JavaDocGenerator - generated javadoc for  source code
